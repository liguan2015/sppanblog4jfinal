/*
SQLyog Ultimate v11.24 (32 bit)
MySQL - 5.6.35 : Database - jfinalblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`jfinalblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `jfinalblog`;

/*Data for the table `tb_blog` */

insert  into `tb_blog`(`id`,`authorId`,`content`,`createAt`,`featured`,`category`,`privacy`,`status`,`summary`,`tags`,`title`,`views`) values (1,1,'<p>1.Nginx 简介</p><p>Nginx (&quot;engine x&quot;) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx</p><p>是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，它已经在该站点运行超过两年半了。 Igor 将</p><p>源代码以类 BSD 许可证的形式发布。尽管还是测试版，但是，Nginx 已经因为它的稳定性、丰富的功能集、示例配置</p><p>文件和低系统资源的消耗而闻名了。</p><p>&nbsp;&nbsp; Nginx采用最新的epoll（Linux 2.6内核）和kqueue(freebsd)网络I/O模型，而Apache则使用的是传统的select</p><p>模型。目前Linux下能够承受高并方访问的Squid、Memcached都是采用是epoll网络I/O模型。</p><p>2.使用 Nginx 前必须了解的事项</p><p>1.目前官方 Nginx 并不支持 Windows，您只能在包括 Linux、UNIX、BSD 系统下安装和使用；<br/>2.Nginx 本身只是一个 HTTP 和反向代理服务器，它无法像 Apache 一样通过安装各种模块来支持不同的页面脚本，</p><p>例如 PHP、CGI 等；<br/>3.Nginx 支持简单的负载均衡和容错；<br/>4.支持作为基本 HTTP 服务器的功能，例如日志、压缩、Byte ranges、Chunked responses、SSL、虚拟主机等等，</p><p>应有尽有。</p><p>3.下载介质<br/>&nbsp;&nbsp; Nginx部署之前，首先根据项目的需要选择需要安装的组件，实际环境一般会考虑需要支持gzip压缩和rewrite模</p><p>块。所以安装的第一步是下载Ngix及Ngix的相关组件。<br/>1) Nginx本身<br/>&nbsp;&nbsp; 下载地址：http://nginx.org/en/download.html<br/>&nbsp;&nbsp; 建议下载最新版本介质，目前最新的是：1.0.2<br/>2) gzip压缩依赖库：zlib<br/>&nbsp;&nbsp; 下载地址:http://www.zlib.net<br/>&nbsp;&nbsp; 下载版本：Version 1.2.5<br/>3)Rewrite模块的正则表达式依赖库:pcre<br/>&nbsp;&nbsp; pcre库简称：Perl兼容正则表达式<br/>&nbsp;&nbsp; 下载地址：http://www.pcre.org<br/>&nbsp;&nbsp; 下载版本：pcre-8.02<br/>&nbsp;</p><p>4.开始安装</p><p><br/></p><p>1) .安装&nbsp;pcre</p><p>tar -zxvf pcre-8.02.tar.gz<br/>./configure<br/>make<br/>make install<br/>默认安装到/usr/local/lib下即可。<br/>安装完成后可以#ls -l /usr/local/lib/libpcre.so</p><p>2）.安装nginx</p><p>tar zxvf nginx-1.0.11.tar.gz</p><p>cd nginx-1.0.11<br/>./configure --prefix=/usr/local/nginx&nbsp; --with-poll_module&nbsp;&nbsp; --with-http_stub_status_module</p><p>make &amp;&amp; make install</p><p>3）管理nginx服务</p><p>启动：</p><p>/usr/local/nginx/sbin/nginx</p><p>停止</p><p>/usr/local/nginx/sbin/nginx -s stop</p><p>重启</p><p>/usr/local/nginx/sbin/nginx&nbsp; -s reload</p><p>查看状态</p><p>netstat -autlp| grep nginx</p><p><br/></p>','2017-01-26 10:41:46',0,1,0,0,'1.Nginx 简介Nginx (&quot;engine x&quot;) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站...','nginx','CentOS下安装Nginx教程',515),(2,1,'<p>										</p><p><span style=\"font-size:20px;font-family:Microsoft YaHei,STXihei;font-weight:bold\">maven中引入oracle驱动报错Missing artifact com.oracle:ojdbc14:jar:10.2.0.4.0</span></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei;color:#888888\">时间:2015年09月22日&nbsp;&nbsp;浏览:7747次</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">在maven中央库中查找ojdbc，发现最新的版本是10.2.0.4.0，然后在maven项目中引入ojdbc，发现报错Missing artifact com.oracle:ojdbc14:jar:10.2.0.4.0，如下图1所示：</span></p><p><img src=\"/upload/img/blog/1_20170214151248.png\" title=\"1_20170214151248.png\" alt=\"1.png\"/></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei\">图1：Missing artifact</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">发现中央库中明明是有的，但是在项目中却怎么都引入不进来。后来在网上找到解决方案，原来是因为oracle的ojdbc.jar是收费的，所以maven的中央仓库中没有这个资源，只能通过配置本地库才能加载到项目中去。</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">方法步骤如下：</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei;font-weight:bold\">Step 1</span><span style=\"font-family:Microsoft YaHei,STXihei\">：去oracle官网下载ojdbc驱动</span></p><p><img src=\"/upload/img/blog/1_20170214151255.png\" title=\"1_20170214151255.png\" alt=\"2.png\"/></p><p><span style=\"font-family: &#39;Microsoft YaHei&#39;, STXihei; font-size: 12px;\">图2：下载ojdbc6.jar</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">最新的是ojdbc7.jar，我这里就下载ojdbc6.jar好了。</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei;font-weight:bold\">Step 2</span><span style=\"font-family:Microsoft YaHei,STXihei\">：安装到本地仓库</span></p><p><img src=\"/upload/img/blog/1_20170214151300.png\" title=\"1_20170214151300.png\" alt=\"3.png\"/></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei\">图3：安装至本地仓库</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">将下载好的ojdbc6.jar复制到系统默认的用户目录下，我的用户目录是C:\\Users\\YEDWARD，然后在该目录下打开命令窗口，然后输入如下命令：</span></p><p><span style=\"font-size:12px;font-family:consolas;color:#333333;background-color:#fbfbfb\">mvn&nbsp;install:install-file&nbsp;-DgroupId=com.oracle&nbsp;-DartifactId=ojdbc14&nbsp;-Dversion=10.2.0.4.0&nbsp;-Dpackaging=jar&nbsp;-Dfile=ojdbc6.jar</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">如上图3所示，如果出现了BUILD SUCCESS，则说明安装到本地仓库成功了，这时去本地仓库看下，如下图4所示，会发现已经被成功的安装进来了。</span></p><p><img src=\"/upload/img/blog/1_20170214151306.png\" title=\"1_20170214151306.png\" alt=\"4.png\"/></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei\">图4：安装成功</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">如上图4所示，已经成功安装了，并且名字都被改了。这个时候，再去项目的pom.xml中引入，就会发现一切都正常了。</span></p><p><br/></p><p>\r\n									</p>','2017-01-26 10:41:46',0,1,0,0,'maven中引入oracle驱动报错Missing artifact com.oracle:ojdbc14:jar:10.2.0.4.0时间:2015年09月22日&amp;nbsp;&amp;nbsp;浏览:7747次在maven中央库中查找ojdbc，发现最...','maven','安装ojdbc驱动到本地MAVEN库',535),(3,1,'<p>Spring+Quartz实现定时任务有基于配置文件和基于注解两种方式，本文是关于使用配置文件实现定时任务的示例。</p><p>①编写需要调度的类</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.study;\r\nimport&nbsp;org.springframework.scheduling.annotation.Scheduled;\r\nimport&nbsp;org.springframework.stereotype.Component;\r\npublic&nbsp;class&nbsp;QuartzJob&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;QuartzJob(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartzjob创建成功&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartz执行的任务调度&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">②设置配置文件spring-quartz.xml</span></p><pre class=\"brush:java;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;定义导出交易商基础信息表任务调度--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;1、实例化需要进行任务调度的对象&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queryFirmJob&quot;&nbsp;class=&quot;gnnt.MEBS.pushSystem.job.QueryFirmJob&quot;&gt;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;2、定义调用对象和调用对象的方法&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queryFirmJobTask&quot;&nbsp;class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;调用的类&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;targetObject&quot;&nbsp;ref=&quot;queryFirmJob&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;调用类中的方法&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;targetMethod&quot;&nbsp;value=&quot;run&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;是否并发执行&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;concurrent&quot;&nbsp;value=&quot;false&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;3、定义触发时间&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queryFirmJobCronTriggerBean&quot;&nbsp;class=&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;jobDetail&quot;&nbsp;ref=&quot;queryFirmJobTask&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;cron表达式&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;cronExpression&quot;&nbsp;value=&quot;0&nbsp;0&nbsp;20&nbsp;*&nbsp;*&nbsp;?&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--定义任务调度--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;总管理类&nbsp;如果将lazy-init=&#39;false&#39;那么容器启动就会执行调度程序&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;startQuertz&quot;&nbsp;lazy-init=&quot;false&quot;&nbsp;autowire=&quot;no&quot;&nbsp;class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;triggers&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref&nbsp;bean=&quot;queryFirmJobCronTriggerBean&quot;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">③启动spring容器</span><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.study;\r\nimport&nbsp;org.springframework.context.ApplicationContext;\r\nimport&nbsp;org.springframework.context.support.ClassPathXmlApplicationContext;\r\npublic&nbsp;class&nbsp;Test&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;启动spring容器&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationContext&nbsp;ac&nbsp;=&nbsp;newClassPathXmlApplicationContext(&quot;classpath:spring-quartz.xml&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p>','2017-01-26 10:41:46',0,1,0,0,'Spring+Quartz实现定时任务有基于配置文件和基于注解两种方式，本文是关于使用配置文件实现定时任务的示例。①编写需要调度的类package&amp;nbsp;com.study; import&amp;nbsp;org.springframework.s...','spring,quartz','spring Quartz基于配置文件实现',504),(4,1,'<p>本文主要是Spring整合Quartz的注解实现方式示例。</p><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">①配置需要调度的类，并添加注解</span></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.study;\r\nimport&nbsp;org.springframework.scheduling.annotation.Scheduled;\r\nimport&nbsp;org.springframework.stereotype.Component;\r\n@Component\r\npublic&nbsp;class&nbsp;QuartzJob&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;QuartzJob(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartzjob创建成功&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Scheduled(cron&nbsp;=&nbsp;&quot;0/1&nbsp;*&nbsp;*&nbsp;&nbsp;*&nbsp;*&nbsp;?&nbsp;&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;voidrun(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartz执行的任务调度&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">②添加配置文件</span><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p><pre class=\"brush:java;toolbar:false\">&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:task=&quot;http://www.springframework.org/schema/task&quot;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&nbsp;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/task\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/task/spring-task-3.0.xsd&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc/spring-mvc.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;gnnt.MEBS.pushSystem.job&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;task:executor&nbsp;id=&quot;executor&quot;&nbsp;pool-size=&quot;5&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;task:scheduler&nbsp;id=&quot;scheduler&quot;&nbsp;pool-size=&quot;10&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;task:annotation-driven&nbsp;executor=&quot;executor&quot;&nbsp;scheduler=&quot;scheduler&quot;&nbsp;/&gt;\r\n&lt;/beans&gt;</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">③启动容器，这里通过配置web.xml启动</span><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p><pre class=\"brush:java;toolbar:false\">&lt;web-app&nbsp;version=&quot;2.5&quot;&nbsp;xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xsi:schemalocation=&quot;http://java.sun.com/xml/ns/javaee&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:spring-quartz2.xml&lt;/param-value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/context-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/listener&gt;\r\n&lt;/web-app&gt;</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p>','2017-01-26 10:41:46',0,1,0,0,'本文主要是Spring整合Quartz的注解实现方式示例。①配置需要调度的类，并添加注解package&amp;nbsp;com.study; import&amp;nbsp;org.springframework.scheduling.annotation.S...','spring,quartz','spring Quartz基于注解实现',500),(5,1,'<p>springboot项目支持标准的servlet3.0容器部署，也就是打成war包，使用例如Tomcat的方式进行部署。同时，springboot更加推荐自己新引入的服务部署方式，即使用jar包部署。本文主要展示使用jar的部署方式。</p><p>1、使用maven构建项目，在pom.xml文件中加入插件如下所示：</p><pre class=\"brush:xml;toolbar:false;\">&lt;plugin&gt;\r\n	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\r\n	&lt;configuration&gt;\r\n		&lt;mainClass&gt;net.sppan.something.Application&lt;/mainClass&gt;\r\n		&lt;fork&gt;true&lt;/fork&gt;\r\n	&lt;/configuration&gt;\r\n&lt;/plugin&gt;</pre><p>2、如果项目中classpath根目录以外还存在xml文件，例如mybatis的mapper文件等，需要在maven中进行一下资源文件的包含。</p><pre class=\"brush:xml;toolbar:false\">&lt;resources&gt;\r\n	&lt;resource&gt;\r\n		&lt;directory&gt;src/main/java&lt;/directory&gt;\r\n		&lt;includes&gt;\r\n			&lt;include&gt;**/*.xml&lt;/include&gt;\r\n		&lt;/includes&gt;\r\n	&lt;/resource&gt;\r\n	&lt;resource&gt;\r\n		&lt;directory&gt;src/main/resources&lt;/directory&gt;\r\n	&lt;/resource&gt;\r\n&lt;/resources&gt;</pre><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><strong>需要注意的是</strong></span>：在maven中，默认包含了<span style=\"color: rgb(255, 0, 0);\">src/main/resources</span>如果使用了resource标签，会覆盖默认行为，所以上面不但要包含<span style=\"color: rgb(255, 0, 0);\">src/main/java</span>，还需要src/main/srouces。</p><p>3、修改pom.xml中的打包方式为jar。</p><pre class=\"brush:xml;toolbar:false\">&lt;packaging&gt;jar&lt;/packaging&gt;</pre><p>4、使用maven进行打包（maven package<span>）即可得到可以运行的jar包。</span></p>','2017-01-26 10:41:46',0,1,0,0,'springboot项目支持标准的servlet3.0容器部署，也就是打成war包，使用例如Tomcat的方式进行部署。同时，springboot更加推荐自己新引入的服务部署方式，即使用jar包部署。本文主要展示使用jar的部署方式。1、使用ma...','springboot','springboot项目jar发布',515),(6,1,'<p>1、启动脚本start.sh:<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nrm&nbsp;-f&nbsp;tpid\r\nnohup&nbsp;java&nbsp;-jar&nbsp;something.jar&nbsp;--spring.config.location=application.properties&nbsp;&gt;&nbsp;/dev/null&nbsp;2&gt;&amp;1&nbsp;&amp;\r\necho&nbsp;$!&nbsp;&gt;&nbsp;tpid\r\necho&nbsp;something&nbsp;Start&nbsp;Success!</pre><p>2、服务检查脚本check.sh：<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nAPP_NAME=something\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;something&nbsp;is&nbsp;running.&#39;\r\nelse\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;something&nbsp;is&nbsp;NOT&nbsp;running.&#39;\r\nfi</pre><p>3、服务停止脚本stop.sh:<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nAPP_NAME=something\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Stop&nbsp;Process...&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-15&nbsp;$tpid\r\nfi\r\nsleep&nbsp;5\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Kill&nbsp;Process!&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;$tpid\r\nelse\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Stop&nbsp;Success!&#39;\r\nfi</pre><p>4、杀进程脚本kill.sh:<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nAPP_NAME=something\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Kill&nbsp;Process!&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;$tpid\r\nfi</pre><p><span style=\"color: rgb(255, 0, 0);\"><strong>需要注意的是：</strong></span></p><p>如果是在Windows上面新建的脚本，在Linux执行时可能会出现如下错误。</p><pre class=\"brush:ps;toolbar:false\">/bin/sh^M:&nbsp;bad&nbsp;interpreter:&nbsp;No&nbsp;such&nbsp;file&nbsp;or&nbsp;directory。</pre><p>这是因为不同系统编码格式引起的：在windows系统中编辑的.sh文件可能有不可见字符，所以在Linux系统下执行会报以上异常信息。</p><p>解决方案：</p><p>1、使用vi编辑器打开脚本文件，以start.sh为例：</p><pre class=\"brush:ps;toolbar:false\">vi&nbsp;start.sh</pre><p>2、利用如下命令查看文件格式。出现结果为fileformat=dos 或 fileformat=unix :</p><pre class=\"brush:ps;toolbar:false\">:set&nbsp;ff&nbsp;或&nbsp;:set&nbsp;fileformat</pre><p>3、利用如下命令修改文件格式:</p><pre class=\"brush:ps;toolbar:false\">set&nbsp;ff=unix&nbsp;或&nbsp;:set&nbsp;fileformat=unix</pre><p>4、保存退出：<br/></p><pre class=\"brush:ps;toolbar:false\">:wq</pre><p><br/></p>','2017-01-26 10:41:46',0,1,0,0,'1、启动脚本start.sh:#!/bin/sh rm&amp;nbsp;-f&amp;nbsp;tpid nohup&amp;nbsp;java&amp;nbsp;-jar&amp;nbsp;something.jar&amp;nbsp;--spring.config.location=ap...','springboot','springboot项目Linux服务脚本',499),(7,1,'<p>jsonReader是jqGrid的一个重要选项，用于设置如何解析从Server端发回来的json数据，如果Server返回的是xml数据，则对应的使用xmlReader来解析。jsonReader的默认值为：</p><pre class=\"brush:js;toolbar:false\">jsonReader:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;&quot;rows&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表实际模型数据的入口\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page:&nbsp;&quot;page&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表当前页码的数据\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total:&nbsp;&quot;total&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表页码总数的数据\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;records:&nbsp;&quot;records&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表数据行总数的数据\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeatitems:&nbsp;true,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果设为false，则jqGrid在解析json时，会根据name来搜索对应的数据元素（即可以json中元素可以不按顺序）；而所使用的name是来自于colModel中的name设定。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell:&nbsp;&quot;cell&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;&quot;id&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userdata:&nbsp;&quot;userdata&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subgrid:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;&quot;rows&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeatitems:&nbsp;true,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell:&nbsp;&quot;cell&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>假如有下面一个json字符串：</p><pre class=\"brush:java;toolbar:false\">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;totalpages&quot;:&nbsp;&quot;3&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;currpage&quot;:&nbsp;&quot;1&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;totalrecords&quot;:&nbsp;&quot;11&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;griddata&quot;:&nbsp;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SalesReasonID&quot;:&nbsp;&quot;1&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Name&quot;:&nbsp;&quot;Price&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ReasonType&quot;:&nbsp;&quot;Other&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ModifiedDate&quot;:&nbsp;&quot;1998年6月1日&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SalesReasonID&quot;:&nbsp;&quot;2&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Name&quot;:&nbsp;&quot;On&nbsp;Promotion&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ReasonType&quot;:&nbsp;&quot;Promotion&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ModifiedDate&quot;:&nbsp;&quot;1998年6月1日&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;]}</pre>其对应的jsonReader为：<pre class=\"brush:js;toolbar:false\">jsonReader:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;&quot;griddata&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;total:&nbsp;&quot;totalpages&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;page:&nbsp;&quot;currpage&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;records:&nbsp;&quot;totalrecords&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;repeatitems:&nbsp;false\r\n}</pre><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\">注：cell、id在repeatitems为true时可以用到，即每一个记录是由一对id和cell组合而成，一般比较少用到。</span><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"></span><br/></span></p><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><br/></span></p><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><br/></span></p>','2017-01-26 10:41:46',0,1,0,0,'jsonReader是jqGrid的一个重要选项，用于设置如何解析从Server端发回来的json数据，如果Server返回的是xml数据，则对应的使用xmlReader来解析。jsonReader的默认值为：jsonReader:&amp;nbsp;{...','jqgrid','jqgrid解析服务端分页数据',582),(8,1,'<p>										</p><p><span style=\"color: rgb(227, 55, 55);\">转自</span>：<a href=\"http://chenjumin.iteye.com/blog/355544\" target=\"_blank\">http://chenjumin.iteye.com/blog/355544</a></p><p>介绍以下类接口：</p><p>&nbsp; &nbsp; ApplicationContextAware接口、ApplicationEvent抽象类、ApplicationListener接口、BeanNameAware接口、InitializingBean接口、DisposableBean接口。</p><p>一、ApplicationContextAware接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当一个类需要获取ApplicationContext实例时，可以让该类实现ApplicationContextAware接口。代码展示如下：</p><pre><code>public&nbsp;class&nbsp;Animal&nbsp;implements&nbsp;ApplicationContextAware,&nbsp;BeanNameAware{\r\n	private&nbsp;String&nbsp;beanName;\r\n	private&nbsp;ApplicationContext&nbsp;applicationContext;\r\n\r\n	public&nbsp;void&nbsp;setBeanName(String&nbsp;name)&nbsp;{\r\n		this.beanName&nbsp;=&nbsp;name;\r\n	}\r\n	\r\n	/**\r\n	&nbsp;*&nbsp;@param&nbsp;applicationContext&nbsp;该参数将由Spring容器自动赋值\r\n	&nbsp;*/\r\n	public&nbsp;void&nbsp;setApplicationContext(ApplicationContext&nbsp;applicationContext)throws&nbsp;BeansException&nbsp;{\r\n		this.applicationContext&nbsp;=&nbsp;applicationContext;\r\n	}\r\n\r\n	public&nbsp;void&nbsp;run(){\r\n		System.out.println(beanName);\r\n		\r\n		//发布自定义事件\r\n		AnimalEvent&nbsp;event&nbsp;=&nbsp;new&nbsp;AnimalEvent(this,&nbsp;\"老虎\");\r\n		applicationContext.publishEvent(event);\r\n	}\r\n}</code></pre><p>通过@Autowired注解可以自动装配一些常用对象实例：</p><pre><code>@Autowired\r\nprivate&nbsp;MessageSource&nbsp;messageSource;&nbsp;\r\n\r\n@Autowired\r\nprivate&nbsp;ResourceLoader&nbsp;resourceLoader;&nbsp;\r\n\r\n@Autowired\r\nprivate&nbsp;ApplicationContext&nbsp;applicationContext;</code></pre><p>二、ApplicationEvent抽象类</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当需要创建自定义事件时，可以新建一个继承自ApplicationEvent抽象类的类。代码展示如下：</p><pre><code>/**\r\n&nbsp;*&nbsp;自定义事件\r\n&nbsp;*/\r\npublic&nbsp;class&nbsp;AnimalEvent&nbsp;extends&nbsp;ApplicationEvent&nbsp;{\r\n	private&nbsp;String&nbsp;name;\r\n	\r\n	public&nbsp;String&nbsp;getName()&nbsp;{\r\n		return&nbsp;name;\r\n	}\r\n\r\n	/**\r\n	&nbsp;*&nbsp;@param&nbsp;source&nbsp;事件源对象\r\n	&nbsp;*/\r\n	public&nbsp;AnimalEvent(Object&nbsp;source){\r\n		super(source);\r\n	}\r\n	\r\n	public&nbsp;AnimalEvent(Object&nbsp;source,&nbsp;String&nbsp;name){\r\n		super(source);\r\n		this.name&nbsp;=&nbsp;name;\r\n	}\r\n}</code></pre><p>三、ApplicationListener接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当需要监听自定义事件时，可以新建一个实现ApplicationListener接口的类，并将该类配置到Spring容器中。代码展示如下：</p><pre><code>/**\r\n&nbsp;*&nbsp;自定义事件监听器\r\n&nbsp;*/\r\npublic&nbsp;class&nbsp;CustomEventListener&nbsp;implements&nbsp;ApplicationListener&nbsp;{\r\n	public&nbsp;void&nbsp;onApplicationEvent(ApplicationEvent&nbsp;event)&nbsp;{\r\n		if(event&nbsp;instanceof&nbsp;AnimalEvent){\r\n			AnimalEvent&nbsp;animalEvent&nbsp;=&nbsp;(AnimalEvent)event;\r\n			System.out.println(\"触发自定义事件：Animal&nbsp;name&nbsp;is&nbsp;\"&nbsp;+&nbsp;animalEvent.getName());\r\n		}\r\n	}\r\n}</code></pre><p><span style=\"color: rgb(255, 0, 0);\">注：如果是在springboot项目中，需要监听所有的事件，则需要在application.properties中配置</span></p><pre><code>context.listener.classes=net.sppan.base.config.listener.CustomEventListener</code></pre><p>要发布自定义事件，需要调用ApplicationContext的publishEvent方法，具体用法请看Animal类的源码。</p><p>&nbsp;</p><p>&nbsp;&nbsp; 四、BeanNameAware接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当bean需要获取自身在容器中的id/name时，可以实现BeanNameAware接口。</p><p>&nbsp;</p><p>五、InitializingBean接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当需要在bean的全部属性设置成功后做些特殊的处理，可以让该bean实现InitializingBean接口。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 效果等同于bean的init-method属性的使用或者@PostContsuct注解的使用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 三种方式的执行顺序：先注解，然后执行InitializingBean接口中定义的方法，最后执行init-method属性指定的方法。</p><p>&nbsp;</p><p>六、DisposableBean接口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当需要在bean销毁之前做些特殊的处理，可以让该bean实现DisposableBean接口。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 效果等同于bean的destroy-method属性的使用或者@PreDestory注解的使用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 三种方式的执行顺序：先注解，然后执行DisposableBean接口中定义的方法，最后执行destroy-method属性指定的方法。</p><p><br></p><p>									</p>','2017-01-26 10:41:46',1,2,0,0,'转自：http://chenjumin.iteye.com/blog/355544介绍以下类接口：&nbsp; &nbsp; ApplicationContextAware接口、ApplicationEvent抽象类、ApplicationListener接口、BeanNameAware接口、InitializingBean接口、DisposableBean接口。一、ApplicationContextAware接口&nbsp;&nbsp;&nbsp;&nbsp; 当一个类需要获取ApplicationContext实例时，可以让该类实现ApplicationContextAware接口。代码...','java','Spring常用的接口和类（一）',496),(9,1,'<p>1、操作符类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;net.sppan.base.service.specification;\r\n\r\n/**\r\n&nbsp;*&nbsp;操作符类，这个类中存储了键值对和操作符号，另外存储了连接下一个条件的类型是and还是or\r\n&nbsp;*&nbsp;&lt;br&gt;\r\n&nbsp;*&nbsp;创建时通过&nbsp;id&gt;=7,其中id就是key,&gt;=就是oper操作符，7就是value\r\n&nbsp;*&nbsp;&lt;br&gt;\r\n&nbsp;*&nbsp;特殊的自定义几个操作符(:表示like&nbsp;%v%，b:表示v%,:b表示%v)\r\n&nbsp;*/\r\npublic&nbsp;class&nbsp;SpecificationOperator&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;操作符的key，如查询时的name,id之类\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;操作符的value，具体要查询的值\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Object&nbsp;value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;操作符，自己定义的一组操作符，用来方便查询\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;oper;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;连接的方式：and或者or\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;join;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getKey()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setKey(String&nbsp;key)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;=&nbsp;key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;getValue()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setValue(Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getOper()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oper;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setOper(String&nbsp;oper)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.oper&nbsp;=&nbsp;oper;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getJoin()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;join;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setJoin(String&nbsp;join)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.join&nbsp;=&nbsp;join;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n	public&nbsp;static&nbsp;enum&nbsp;Operator&nbsp;{\r\n		eq,&nbsp;ge,&nbsp;le,&nbsp;gt,&nbsp;lt,&nbsp;likeL,&nbsp;likeR,&nbsp;likeAll,&nbsp;isNull,&nbsp;isNotNull,&nbsp;notEqual;\r\n		@Override\r\n		public&nbsp;String&nbsp;toString()&nbsp;{\r\n			return&nbsp;name();\r\n		}\r\n	}\r\n	public&nbsp;static&nbsp;enum&nbsp;Join&nbsp;{\r\n		and,&nbsp;or;\r\n		@Override\r\n		public&nbsp;String&nbsp;toString()&nbsp;{\r\n			return&nbsp;name();\r\n		}\r\n	}\r\n}</pre><p>2、Specification实现类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;net.sppan.base.service.specification;\r\n\r\nimport&nbsp;net.sppan.base.service.specification.SpecificationOperator.Join;\r\n\r\nimport&nbsp;org.springframework.data.jpa.domain.Specification;\r\n\r\nimport&nbsp;javax.persistence.criteria.CriteriaBuilder;\r\nimport&nbsp;javax.persistence.criteria.CriteriaQuery;\r\nimport&nbsp;javax.persistence.criteria.Predicate;\r\nimport&nbsp;javax.persistence.criteria.Root;\r\n\r\nimport&nbsp;java.util.List;\r\n\r\npublic&nbsp;class&nbsp;SimpleSpecification&lt;T&gt;&nbsp;implements&nbsp;Specification&lt;T&gt;&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;查询的条件列表，是一组列表\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;SpecificationOperator&gt;&nbsp;opers;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecification(List&lt;SpecificationOperator&gt;&nbsp;opers)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.opers&nbsp;=&nbsp;opers;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Predicate&nbsp;toPredicate(Root&lt;T&gt;&nbsp;root,&nbsp;CriteriaQuery&lt;?&gt;&nbsp;criteriaQuery,&nbsp;CriteriaBuilder&nbsp;criteriaBuilder)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//通过resultPre来组合多个条件\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Predicate&nbsp;resultPre&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(SpecificationOperator&nbsp;op:opers)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(index++==0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultPre&nbsp;=&nbsp;generatePredicate(root,criteriaBuilder,op);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Predicate&nbsp;pre&nbsp;=&nbsp;generatePredicate(root,criteriaBuilder,op);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pre==null)&nbsp;continue;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Join.and.name().equalsIgnoreCase(op.getJoin()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultPre&nbsp;=&nbsp;criteriaBuilder.and(resultPre,pre);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(Join.or.name().equalsIgnoreCase(op.getJoin()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultPre&nbsp;=&nbsp;criteriaBuilder.or(resultPre,pre);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;resultPre;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Predicate&nbsp;generatePredicate(Root&lt;T&gt;&nbsp;root,CriteriaBuilder&nbsp;criteriaBuilder,&nbsp;SpecificationOperator&nbsp;op)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据不同的操作符返回特定的查询*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(SpecificationOperator.Operator.eq.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.equal(root.get(op.getKey()),op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.ge.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.ge(root.get(op.getKey()).as(Number.class),&nbsp;(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.le.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.le(root.get(op.getKey()).as(Number.class),(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.gt.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.gt(root.get(op.getKey()).as(Number.class),(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.lt.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.lt(root.get(op.getKey()).as(Number.class),(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.likeAll.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.like(root.get(op.getKey()).as(String.class),&quot;%&quot;+op.getValue()+&quot;%&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.likeL.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.like(root.get(op.getKey()).as(String.class),op.getValue()+&quot;%&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.likeR.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.like(root.get(op.getKey()).as(String.class),&quot;%&quot;+op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.isNull.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.isNull(root.get(op.getKey()));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.isNotNull.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.isNotNull(root.get(op.getKey()));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.notEqual.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.notEqual(root.get(op.getKey()),op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>3、查询条件构造类：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;net.sppan.base.service.specification;\r\n\r\nimport&nbsp;java.util.ArrayList;\r\nimport&nbsp;java.util.List;\r\n\r\nimport&nbsp;net.sppan.base.service.specification.SpecificationOperator.Join;\r\n\r\nimport&nbsp;org.springframework.data.jpa.domain.Specification;\r\n\r\npublic&nbsp;class&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;条件列表\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;SpecificationOperator&gt;&nbsp;opers;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;构造函数，初始化的条件是and\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder(String&nbsp;key,String&nbsp;oper,Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpecificationOperator&nbsp;so&nbsp;=&nbsp;new&nbsp;SpecificationOperator();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setJoin(Join.and.name());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setKey(key);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setOper(oper);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setValue(value);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;SpecificationOperator&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers.add(so);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;SpecificationOperator&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;完成条件的添加\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;add(String&nbsp;key,String&nbsp;oper,Object&nbsp;value,String&nbsp;join)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpecificationOperator&nbsp;so&nbsp;=&nbsp;new&nbsp;SpecificationOperator();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setKey(key);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setValue(value);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setOper(oper);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setJoin(join);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers.add(so);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;添加or条件的重载\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;this，方便后续的链式调用\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;addOr(String&nbsp;key,String&nbsp;oper,Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.add(key,oper,value,Join.or.name());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;添加and的条件\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;add(String&nbsp;key,String&nbsp;oper,Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.add(key,oper,value,Join.and.name());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Specification&lt;T&gt;&nbsp;generateSpecification()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specification&lt;T&gt;&nbsp;specification&nbsp;=&nbsp;new&nbsp;SimpleSpecification&lt;T&gt;(opers);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;specification;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>使用方式：</p><pre class=\"brush:java;toolbar:false\">SimpleSpecificationBuilder&lt;Resource&gt;&nbsp;builder&nbsp;=&nbsp;new&nbsp;SimpleSpecificationBuilder&lt;Resource&gt;();//Resource&nbsp;持久层实体\r\nbuilder.add(&quot;name&quot;,&nbsp;Operator.likeAll.name(),&nbsp;&quot;keyword&quot;);\r\nSpecification&nbsp;specification&nbsp;=&nbsp;builder.generateSpecification()</pre><p><br/></p>','2017-01-26 10:41:46',1,1,0,0,'1、操作符类：package&amp;nbsp;net.sppan.base.service.specification; /** &amp;nbsp;*&amp;nbsp;操作符类，这个类中存储了键值对和操作符号，另外存储了连接下一个条件的类型是and还是or &amp;nb...','springdata,jpa','springdata中Specification查询封装',495),(10,1,'<p>1、<strong>@Entity(name=&quot;EntityName&quot;)</strong></p><p>必须</p><p>name为可选,对应数据库中一的个表。</p><p><br/></p><p>2、<strong>@Table(name=&quot;&quot;,catalog=&quot;&quot;,schema=&quot;&quot;)</strong></p><p>可选,通常和@Entity配合使用,只能标注在实体的class定义处,表示实体对应的数据库表的信息。</p><p>name:可选,表示表的名称.默认地,表名和实体名称一致,只有在不一致的情况下才需要指定表名。</p><p>catalog:可选,表示Catalog名称,默认为Catalog(&quot;&quot;)。</p><p>schema:可选,表示Schema名称,默认为Schema(&quot;&quot;)。</p><p><br/></p><p>3、<strong>@id</strong></p><p>必须</p><p>@id定义了映射到数据库表的主键的属性,一个实体只能有一个属性被映射为主键.置于getXxxx()前。</p><p>&nbsp;</p><p><br/></p><p>4、<strong>@GeneratedValue(strategy=GenerationType,generator=&quot;&quot;)</strong></p><p>可选</p><p>strategy:表示主键生成策略,有AUTO,INDENTITY,SEQUENCE 和 TABLE 4种,分别表示让ORM框架自动选择,根据数据库的Identity字段生成,根据数据库表的Sequence字段生成,以有根据一个额外的表生成主键,默认为AUTO。</p><p>generator:表示主键生成器的名称,这个属性通常和ORM框架相关,例如,Hibernate可以指定uuid等主键生成方式.</p><p><br/></p><p>5、<strong>@Basic(fetch=FetchType,optional=true)</strong></p><p>可选</p><p>@Basic表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的getXxxx()方法,默认即为@Basic。</p><p>fetch: 表示该属性的读取策略,有EAGER和LAZY两种,分别表示主支抓取和延迟加载,默认为EAGER。</p><p>optional:表示该属性是否允许为null,默认为true。</p><p><br/></p><p>6、<strong>@Column</strong></p><p>可选</p><p>@Column描述了数据库表中该字段的详细定义,这对于根据JPA注解生成数据库表结构的工具非常有作用。</p><p>name:表示数据库表中该字段的名称,默认情形属性名称一致。</p><p>nullable:表示该字段是否允许为null,默认为true。</p><p>unique:表示该字段是否是唯一标识,默认为false。</p><p>length:表示该字段的大小,仅对String类型的字段有效。</p><p>insertable:表示在ORM框架执行插入操作时,该字段是否应出现INSETRT语句中,默认为true。</p><p>updateable:表示在ORM框架执行更新操作时,该字段是否应该出现在UPDATE语句中,默认为true.对于一经创建就不可以更改的字段,该属性非常有用,如对于birthday字段。</p><p>columnDefinition:表示该字段在数据库中的实际类型.通常ORM框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将String类型映射到特定数据库的BLOB或TEXT字段类型,该属性非常有用。</p><p><br/></p><p>7、<strong>@Transient</strong></p><p>可选</p><p>@Transient表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。</p><p>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。</p><p><br/></p><p>8、<strong>@Lob</strong></p><p>可选</p><p>@Lob标示该字段为大文本类型。</p><p><br/></p>','2017-01-26 10:41:46',1,1,0,0,'1、@Entity(name=&quot;EntityName&quot;)必须name为可选,对应数据库中一的个表。2、@Table(name=&quot;&quot;,catalog=&quot;&quot;,schema=&quot;&quot;)可选,通常和@Entity配合使用,只能标注在实体的class定义处,表...','jpa','JPA中基本属性注解',484),(11,1,'<p>本文主要讲解在maven项目中使用Lucene进行全文检索的基本步骤。</p><p>一、首先需要引入依赖，使用的版本为4.7.2。</p><pre><code><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">&lt;!--核心包--&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.apache.lucene<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>lucene-core<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>4.7.2<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">&lt;!--关键字高亮--&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.apache.lucene<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>lucene-highlighter<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>4.7.2<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span>\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">&lt;!--分词--&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">dependency</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>com.janeluo<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>ikanalyzer<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>2012_u6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">dependency</span>&gt;</span></code></pre><p>二、创建一个Javabean作为数据传输对象</p><pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">addBean</span><span class=\"hljs-params\">()</span> </span>{\r\n    IndexWriter writer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//指定文件存储路径</span>\r\n        Directory directory = NIOFSDirectory.open(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> File(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"c://\"</span>));\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//创建词法分析</span>\r\n        Analyzer analyzer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IKAnalyzer();\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//创建IndexWriter</span>\r\n        IndexWriterConfig iwc = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexWriterConfig(Version.LUCENE_47, analyzer);\r\n        writer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexWriter(directory, iwc);\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//创建文档</span>\r\n        Document doc = createDoc(bean);\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//保存文档</span>\r\n        writer.addDocument(doc);\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (Exception e) {\r\n        logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"add bean to lucene error\"</span>, e);\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">finally</span> {\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span> (writer != <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>) {\r\n               writer.close();\r\n            }\r\n        } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (IOException e) {\r\n            logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"close failed\"</span>, e);\r\n        }\r\n    }\r\n}\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n* 创建Doc\r\n* <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> bean\r\n* <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@return</span>\r\n*/</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> Document <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">createDoc</span><span class=\"hljs-params\">(SearcherBean bean)</span> </span>{\r\n        Document doc = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Document();\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> StringField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"id\"</span>, bean.getId(), Field.Store.YES));\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> TextField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"title\"</span>, bean.getTitle(), Field.Store.YES));\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> TextField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"summary\"</span>, bean.getSummary(), Field.Store.YES));\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> TextField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"content\"</span>, bean.getContent(), Field.Store.YES));	\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> StringField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"authorName\"</span>, bean.getAuthorName(), Field.Store.YES));\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IntField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"views\"</span>, bean.getViews(), Field.Store.YES));\r\n        doc.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> StringField(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"createdAt\"</span>, DateTools.dateToString(bean.getCreateAt(), DateTools.Resolution.MILLISECOND), Field.Store.YES));\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> doc;\r\n}</code></pre>','2017-02-16 15:00:29',0,1,0,0,'本文主要讲解在maven项目中使用Lucene进行全文检索的基本步骤。一、首先需要引入依赖，使用的版本为4.7.2。&lt;!--核心包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt; &lt;artifactId&gt;lucene-core&lt;/artifactId&gt; &lt;version&gt;4.7.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--关键字高亮--&gt; &lt;dependency&gt; &lt;groupId&g...','lucene','在项目中使用Lucene进行全文检索一',429),(12,1,'<p>接上一文章<a href=\"http://60.205.178.218/b/view/11\" target=\"_blank\">在项目中使用Lucene进行全文检索一</a></p><p>4、删除索引</p><pre><code><span class=\"hljs-annotation\">@Override</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">deleteBean</span><span class=\"hljs-params\">(String beanId)</span> </span>{\r\n    IndexWriter writer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n        IndexWriterConfig iwc = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexWriterConfig(Version.LUCENE_47, analyzer);\r\n        writer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexWriter(directory, iwc);\r\n        writer.deleteDocuments(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Term(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"id\"</span>, beanId));\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (IOException e) {\r\n        logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"delete bean to lucene error,beanId:\"</span>+beanId,e);\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (InterruptedException e) {\r\n        logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"delete bean to lucene error,beanId:\"</span>+beanId,e);\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">finally</span> {\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(writer!=<span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>) {\r\n                writer.close();\r\n            }\r\n        } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (IOException e) {\r\n            logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"close failed\"</span>, e);\r\n        }\r\n    }\r\n}\r\n    \r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * 删除所有\r\n */</span>\r\n<span class=\"hljs-annotation\">@Override</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">deleteAllBean</span><span class=\"hljs-params\">()</span> </span>{\r\n	IndexWriter writer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n	<span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n		IndexWriterConfig iwc = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexWriterConfig(Version.LUCENE_47, analyzer);\r\n		writer = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexWriter(directory, iwc);\r\n		writer.deleteAll();\r\n	} <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (IOException e) {\r\n		logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"delete allBean to lucene error\"</span>,e);\r\n	} <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (InterruptedException e) {\r\n		logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"delete allBean to lucene error\"</span>,e);\r\n	} <span class=\"hljs-keyword\" style=\"font-weight: 700;\">finally</span> {\r\n		<span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n			<span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(writer!=<span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>) {\r\n				writer.close();\r\n			}\r\n		} <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (IOException e) {\r\n			logger.error(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"close failed\"</span>, e);\r\n		}\r\n	}\r\n}</code></pre>','2017-02-16 16:34:51',0,1,0,0,'接上一文章在项目中使用Lucene进行全文检索一4、删除索引@Override public void deleteBean(String beanId) { IndexWriter writer = null; try { IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_47, analyzer); writer = new IndexWriter(directory, iwc); writer.deleteDocuments(new Term(\"id\", beanId)); } catch (IOException ...','lucene','在项目中使用Lucene进行全文检索二',411),(13,1,'<p>接上一文章<a href=\"http://60.205.178.218/b/view/12\" target=\"_blank\">在项目中使用Lucene进行全文检索二</a></p><p>5、检索</p><pre><code><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n *  转换为SearchBean\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> searcher\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> topDocs\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@return</span>\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@throws</span> IOException\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> List<searcherbean> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getSearcherBeans</span><span class=\"hljs-params\">(Query query, IndexSearcher searcher, TopDocs topDocs)</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">throws</span> IOException </searcherbean></span>{\r\n    List<searcherbean> searcherBeans = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> ArrayList<searcherbean>();\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">for</span> (ScoreDoc item : topDocs.scoreDocs) {\r\n        Document doc = searcher.doc(item.doc);\r\n        SearcherBean searcherBean = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> SearcherBean();\r\n        searcherBean.setId(doc.get(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"id\"</span>));\r\n        \r\n        searcherBean.setTitle(setHighlighter(query, doc, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"title\"</span>));\r\n        searcherBean.setSummary(setHighlighter(query, doc, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"summary\"</span>));\r\n        searcherBean.setContent(setHighlighter(query, doc, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"content\"</span>));\r\n        \r\n        searcherBean.setViews(Integer.parseInt(doc.get(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"views\"</span>)));\r\n        searcherBean.setAuthorName(doc.get(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"authorName\"</span>));\r\n        \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n			searcherBean.setCreateAt(DateTools.stringToDate(doc.get(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"createdAt\"</span>)));\r\n		} <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (java.text.ParseException e) {\r\n			e.printStackTrace();\r\n		}\r\n        searcherBeans.add(searcherBean);\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> searcherBeans;\r\n}\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * 获取Query 对象\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> keyword\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> module\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@return</span>\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> Query <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getQuery</span><span class=\"hljs-params\">(String keyword)</span> </span>{\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n        QueryParser queryParser1 = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> QueryParser(Version.LUCENE_47, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"content\"</span>, analyzer);\r\n        Query termQuery1 = queryParser1.parse(keyword);\r\n        \r\n        QueryParser queryParser2 = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> QueryParser(Version.LUCENE_47, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"title\"</span>, analyzer);\r\n        Query termQuery2 = queryParser2.parse(keyword);\r\n        \r\n        QueryParser queryParser3 = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> QueryParser(Version.LUCENE_47, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"summary\"</span>, analyzer);\r\n        Query termQuery3 = queryParser3.parse(keyword);\r\n        \r\n        BooleanQuery booleanClauses = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> BooleanQuery();\r\n        booleanClauses.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> BooleanClause(termQuery1, BooleanClause.Occur.SHOULD));\r\n        booleanClauses.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> BooleanClause(termQuery2, BooleanClause.Occur.SHOULD));\r\n        booleanClauses.add(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> BooleanClause(termQuery3, BooleanClause.Occur.SHOULD));\r\n        \r\n        booleanClauses.setMinimumNumberShouldMatch(<span class=\"hljs-number\" style=\"color: teal;\">1</span>);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> booleanClauses;\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * 通过关键字搜索分页\r\n * \r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> keyword 关键字\r\n */</span>\r\n<span class=\"hljs-annotation\">@Override</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> Page<searcherbean> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">search</span><span class=\"hljs-params\">(String keyword)</span> </searcherbean></span>{\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n        IndexReader aIndexReader = DirectoryReader.open(directory);\r\n        IndexSearcher searcher = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n        searcher = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexSearcher(aIndexReader);\r\n        Query query = getQuery(keyword);\r\n        TopDocs topDocs = searcher.search(query, <span class=\"hljs-number\" style=\"color: teal;\">50</span>);\r\n        List<searcherbean> searcherBeans = getSearcherBeans(query, searcher, topDocs);\r\n        Page<searcherbean> searcherBeanPage = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Page&lt;&gt;(searcherBeans, <span class=\"hljs-number\" style=\"color: teal;\">1</span>, <span class=\"hljs-number\" style=\"color: teal;\">10</span>, <span class=\"hljs-number\" style=\"color: teal;\">100</span>, <span class=\"hljs-number\" style=\"color: teal;\">1000</span>);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> searcherBeanPage;\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (Exception e) {\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n}\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * 分页检索\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> pageNum 当前页\r\n * \r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> pageSize 每页条数\r\n * \r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> queryString 关键字\r\n * \r\n */</span>\r\n<span class=\"hljs-annotation\">@Override</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> Page<searcherbean> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">search</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> pageNum, <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> pageSize, String queryString)</span> </searcherbean></span>{\r\n    IndexReader aIndexReader = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n        aIndexReader = DirectoryReader.open(directory);\r\n        IndexSearcher searcher = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n        searcher = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> IndexSearcher(aIndexReader);\r\n        Query query = getQuery(queryString);\r\n        ScoreDoc lastScoreDoc = getLastScoreDoc(pageNum, pageSize, query, searcher);\r\n        TopDocs topDocs = searcher.searchAfter(lastScoreDoc, query, pageSize);\r\n        List<searcherbean> searcherBeans = getSearcherBeans(query, searcher, topDocs);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> totalRow = searchTotalRecord(searcher, query);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> totalPages;\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span> ((totalRow % pageSize) == <span class=\"hljs-number\" style=\"color: teal;\">0</span>) {\r\n            totalPages = totalRow / pageSize;\r\n        } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">else</span> {\r\n            totalPages = totalRow / pageSize + <span class=\"hljs-number\" style=\"color: teal;\">1</span>;\r\n        }\r\n        Page<searcherbean> searcherBeanPage = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Page&lt;&gt;(searcherBeans, pageNum, pageSize, totalPages, totalRow);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> searcherBeanPage;\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (IOException e) {\r\n        e.printStackTrace();\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n}\r\n\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * 根据页码和分页大小获取上一次最后一个ScoreDoc\r\n *\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> pageIndex\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> pageSize\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> query\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> indexSearcher\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@return</span>\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@throws</span> IOException\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> ScoreDoc <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getLastScoreDoc</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> pageIndex, <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> pageSize, Query query, IndexSearcher indexSearcher)</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">throws</span> IOException </span>{\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span> (pageIndex == <span class=\"hljs-number\" style=\"color: teal;\">1</span>) <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//如果是第一页返回空</span>\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> num = pageSize * (pageIndex - <span class=\"hljs-number\" style=\"color: teal;\">1</span>);<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//获取上一页的数量</span>\r\n    TopDocs tds = indexSearcher.search(query, num);\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> tds.scoreDocs[num - <span class=\"hljs-number\" style=\"color: teal;\">1</span>];\r\n}\r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> query\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@return</span>\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@throws</span> IOException\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@Title</span>: searchTotalRecord\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@Description</span>: 获取符合条件的总记录数\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">searchTotalRecord</span><span class=\"hljs-params\">(IndexSearcher searcher, Query query)</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">throws</span> IOException </span>{\r\n    TopDocs topDocs = searcher.search(query, Integer.MAX_VALUE);\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span> (topDocs == <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span> || topDocs.scoreDocs == <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span> || topDocs.scoreDocs.length == <span class=\"hljs-number\" style=\"color: teal;\">0</span>) {\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-number\" style=\"color: teal;\">0</span>;\r\n    }\r\n    ScoreDoc[] docs = topDocs.scoreDocs;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> docs.length;\r\n}</searcherbean></searcherbean></searcherbean></searcherbean></searcherbean></searcherbean></code></pre><p>设置关键字高亮</p><pre><code><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">/**\r\n * 高亮设置\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> query\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> doc\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@param</span> field\r\n * <span class=\"hljs-doctag\" style=\"color: rgb(221, 17, 68);\">@return</span>\r\n */</span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setHighlighter</span><span class=\"hljs-params\">(Query query,Document doc,String field)</span></span>{\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {\r\n        SimpleHTMLFormatter simpleHtmlFormatter = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> SimpleHTMLFormatter(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"<font color=\"\\&quot;red\\&quot;\">\"</font></span><font color=\"\\&quot;red\\&quot;\">, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"</span></font>\");\r\n        Highlighter highlighter = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> Highlighter(simpleHtmlFormatter,<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> QueryScorer(query));\r\n        String fieldValue = doc.get(field);\r\n        String highlighterStr = highlighter.getBestFragment(analyzer,field,fieldValue);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> highlighterStr == <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span> ? fieldValue:highlighterStr;\r\n    } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (Exception e) {\r\n    	e.printStackTrace();\r\n    }\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>;\r\n}</code></pre>','2017-02-16 16:37:24',0,1,0,0,'接上一文章在项目中使用Lucene进行全文检索二5、检索/** * 转换为SearchBean * @param searcher * @param topDocs * @return * @throws IOException */ private List getSearcherBeans(Query query, IndexSearcher searcher, TopDocs topDocs) throws IOException { List searcherBeans = new ArrayList(); for (ScoreDoc item : topDocs.scoreDocs)...','lucene','在项目中使用Lucene进行全文检索三',409),(14,1,'<p>下载流程概览：<br>HttpRequest ---&gt; DownloadAction ---&gt; SUCCESS Result --&gt; 输出流</p><h4><b>STEP01 写一个DownloadAction</b></h4><pre><code><span class=\"hljs-keyword\" style=\"font-weight: 700;\">package</span> study.action;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> java.io.ByteArrayInputStream;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> java.io.InputStream;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> java.io.UnsupportedEncodingException;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> javax.servlet.ServletContext;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> org.apache.struts2.util.ServletContextAware;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">import</span> com.opensymphony.xwork2.ActionSupport;  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">class</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">DownloadAction</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">extends</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">ActionSupport</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">implements</span>  \r\n        <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">ServletContextAware</span> </span>{  \r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">static</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">final</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">long</span> serialVersionUID = <span class=\"hljs-number\" style=\"color: teal;\">1L</span>;  \r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> ServletContext context;  \r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> String filename;  \r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> String mimeType;  \r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> InputStream inStream;  \r\n    <span class=\"hljs-annotation\">@Override</span>  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">execute</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">throws</span> Exception </span>{  \r\n        mimeType = context.getMimeType(filename);  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> SUCCESS;  \r\n    }  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> InputStream <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getInStream</span><span class=\"hljs-params\">()</span> </span>{  \r\n        inStream = context.getResourceAsStream(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"/doc/\"</span> + filename);  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span> (inStream == <span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>) {  \r\n            inStream = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> ByteArrayInputStream(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"Sorry,File not found !\"</span>  \r\n                    .getBytes());  \r\n        }  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> inStream;  \r\n    }  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getMimeType</span><span class=\"hljs-params\">()</span> </span>{  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> mimeType;  \r\n    }  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setFilename</span><span class=\"hljs-params\">(String filename)</span> </span>{  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {  \r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.filename = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> String(filename.getBytes(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"ISO8859-1\"</span>),<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"GBK\"</span>);  \r\n        } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (UnsupportedEncodingException e) {  \r\n        }  \r\n    }  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getFilename</span><span class=\"hljs-params\">()</span> </span>{  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">try</span> {  \r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> String(filename.getBytes(),<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"ISO8859-1\"</span>);  \r\n        } <span class=\"hljs-keyword\" style=\"font-weight: 700;\">catch</span> (UnsupportedEncodingException e) {  \r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.filename;  \r\n        }  \r\n    }  \r\n    <span class=\"hljs-annotation\">@Override</span>  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setServletContext</span><span class=\"hljs-params\">(ServletContext context)</span> </span>{  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.context = context;  \r\n    }  \r\n  \r\n}</code></pre><blockquote><p>说明：<br>1、在下载的Action中，必须有个InputStream类型的field和对应的get方法。<br>2、下载时方便，将文件名、MIMETYPE都写在了Action中。</p></blockquote><h4><b>STEP02 编写配置文件</b></h4><pre><code><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">action</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"download\"</span> <span class=\"hljs-attribute\" style=\"color: teal;\">class</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"study.action.DownloadAction\"</span>&gt;</span>  \r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\" style=\"color: teal;\">type</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"stream\"</span>&gt;</span>  \r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"contentType\"</span>&gt;</span>${mimeType}<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;  \r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"inputName\"</span>&gt;</span>inStream<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;  \r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"contentDisposition\"</span>&gt;</span>attachment;filename=\"${filename}\"<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;  \r\n    <span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->result</span>&gt;  \r\n<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->action</span>&gt;</code></pre><blockquote><p>解释说明：<br>1、为了获取到MIMETYPE，利用了ServletContext的方法。所以必须获得ServlerContext这个对象。本例子中采用DI的方法，有Struts2在运行时注入。<br>2、为了能在HTTP Response中使用到MIMETYPE，所以在Action中提供了对应的get方法，以供OGNL表达式需要。</p></blockquote>','2017-03-06 13:38:44',0,1,0,0,'下载流程概览：HttpRequest ---&gt; DownloadAction ---&gt; SUCCESS Result --&gt; 输出流STEP01 写一个DownloadActionpackage study.action; import java.io.ByteArrayInputStream; import java.io.InputStream; import java.io.UnsupportedEncodingException; import javax.servlet.ServletContext; import org.apache.struts2.util.S...','struts2','Struts2文件下载(灵活控制MIME、FILENAME)',170),(15,1,'<p>struts2的文件上传主要依赖的是org.apache.struts2.interceptor.FileUploadInterceptor这个拦截器，关于这个拦截器我不想做过多的研究，这里主要讨论的是该拦截器里面定义的几个关于文件上传的重要属性。</p><blockquote><p>以下的属性主要配置在struts.xml中对应文件上传Action的拦截器中。</p></blockquote><pre><code><span class=\"hljs-keyword\" style=\"font-weight: 700;\">protected</span> Long maximumSize;   <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//允许上传单个文件的大小单位为字节</span>\r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">protected</span> String allowedTypes; <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//允许上传的文件类型详见tomcat中web.xml文件</span>\r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">protected</span> Set allowedTypesSet; <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//允许上传的文件类型Set集合详见tomcat中web.xml文件。allowedTypes与allowedTypesSet属性如有多个值之间用逗号隔开</span></code></pre><h4>示列：</h4><pre><code><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\"><!-- 文件上传Action --></span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">action</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"Upload\"</span> <span class=\"hljs-attribute\" style=\"color: teal;\">class</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"UploadAction\"</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"success\"</span>&gt;</span>success.jsp<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->result</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"input\"</span>&gt;</span>upload.jsp<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->result</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">interceptor-ref</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"fileUpload\"</span>&gt;</span>\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\"><!--设置允许上传单个文件的大小单位为字节--></span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"maximumSize\"</span>&gt;</span>102400<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;\r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\"><!--允许上传的文件类型详见tomcat中web.xml文件--></span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"allowedTypesSet\"</span>&gt;</span>application/msword<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->interceptor-ref</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">interceptor-ref</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"defaultStack\"</span>/&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->action</span>&gt;</code></pre><blockquote><p>注意：要使用文件上传功能我们必须显实的在对应文件上传的Action中指定这个拦截器及在该拦截器中配置我们需要的参数，最后别忘了附加上这个默认的拦截器，这样才能真正发挥struts2的文件上传功能。</p></blockquote><h4>Action中的示列代码:</h4><pre><code>publicclass FileUploadAction extends ActionSupport {\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> File file;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> String fileContentType;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> String fileFileName;\r\n    <span class=\"hljs-keyword\" style=\"font-weight: 700;\">private</span> String memo;\r\n    <span class=\"hljs-annotation\">@Override</span>\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">execute</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">throws</span> Exception </span>{\r\n        String path=ServletActionContext.getRequest().getRealPath(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"/upload\"</span>);\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">if</span>(file==<span class=\"hljs-keyword\" style=\"font-weight: 700;\">null</span>) {\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.addFieldError(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"file\"</span>, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"文件不能为空，请选择\"</span>);\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> INPUT;\r\n        }<span class=\"hljs-keyword\" style=\"font-weight: 700;\">else</span>{\r\n            InputStream is=<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> FileInputStream(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.getFile());\r\n            OutputStream os=<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> FileOutputStream(<span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> File(path,<span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.getFileFileName()));\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">byte</span>[] buf=newbyte[<span class=\"hljs-number\" style=\"color: teal;\">1024</span>];\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">int</span> length=<span class=\"hljs-number\" style=\"color: teal;\">0</span>;\r\n            <span class=\"hljs-keyword\" style=\"font-weight: 700;\">while</span>((length=is.read(buf))&gt;<span class=\"hljs-number\" style=\"color: teal;\">0</span>)\r\n            {\r\n                os.write(buf, <span class=\"hljs-number\" style=\"color: teal;\">0</span>, length);\r\n            }\r\n            is.close();\r\n            os.close();\r\n        }\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> SUCCESS;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> File <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getFile</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> file;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setFile</span><span class=\"hljs-params\">(File file)</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.file = file;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getFileContentType</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> fileContentType;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getFileFileName</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> fileFileName;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getMemo</span><span class=\"hljs-params\">()</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> memo;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setFileContentType</span><span class=\"hljs-params\">(String fileContentType)</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.fileContentType = fileContentType;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setFileFileName</span><span class=\"hljs-params\">(String fileFileName)</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.fileFileName = fileFileName;\r\n    }\r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-keyword\" style=\"font-weight: 700;\">void</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">setMemo</span><span class=\"hljs-params\">(String memo)</span> </span>{\r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">this</span>.memo = memo;\r\n    }\r\n\r\n}</code></pre><h4>jsp中的示列代码:</h4><pre><code><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">s:form</span> <span class=\"hljs-attribute\" style=\"color: teal;\">action</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"Upload\"</span> <span class=\"hljs-attribute\" style=\"color: teal;\">enctype</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"multipart/form-data\"</span> <span class=\"hljs-attribute\" style=\"color: teal;\">method</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"post\"</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">s:file</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"file\"</span>&gt;&lt;/</span><span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->s:file</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">s:textfield</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"memo\"</span>&gt;&lt;/</span><span class=\"hljs-tag\" style=\"color: navy;\">s:textfield</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">s:submit</span>&gt;&lt;/</span><span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->s:submit</span>&gt;\r\n<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->&lt;/s:form</span>&gt;</code></pre><h4>struts.xml中的示列代码:</h4><pre><code><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">action</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"Upload\"</span> <span class=\"hljs-attribute\" style=\"color: teal;\">class</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"UploadAction\"</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"success\"</span>&gt;</span>/success.jsp<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->result</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">result</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"input\"</span>&gt;</span>/upload.jsp<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->result</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">interceptor-ref</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"fileUpload\"</span>&gt;</span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"maximumSize\"</span>&gt;</span>102400<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">param</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"allowedTypes\"</span>&gt;</span>application/msword<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->param</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->interceptor-ref</span>&gt;\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">interceptor-ref</span> <span class=\"hljs-attribute\" style=\"color: teal;\">name</span>=<span class=\"hljs-value\" style=\"color: rgb(221, 17, 68);\">\"defaultStack\"</span>/&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\"><!--<span class=\"hljs-title\"-->action</span>&gt;</code></pre><h4>说明</h4><p>a)设置文件上传属性在Action中对应的类型的java.io.File;<br>b)设置文件上传表单的enctype=\"multipart/form-data\" method=\"post\"</p><blockquote><p>private File&nbsp;<span style=\"color: rgb(227, 55, 55);\">file</span>;<br>private String&nbsp;<span style=\"color: rgb(227, 55, 55);\">file</span><span style=\"color: rgb(32, 147, 97);\">ContentType</span>;<br>private String&nbsp;<span style=\"color: rgb(227, 55, 55);\">file</span><span style=\"color: rgb(32, 147, 97);\">FileName</span>;</p></blockquote><p>c)红色部分与文件上传表单中文件上传属性的name一致。<br>d)绿色的为固定写法。</p>','2017-03-06 13:48:02',0,1,0,0,'struts2的文件上传主要依赖的是org.apache.struts2.interceptor.FileUploadInterceptor这个拦截器，关于这个拦截器我不想做过多的研究，这里主要讨论的是该拦截器里面定义的几个关于文件上传的重要属性。以下的属性主要配置在struts.xml中对应文件上传Action的拦截器中。protected Long maximumSize; //允许上传单个文件的大小单位为字节 protected String allowedTypes; //允许上传的文件类型详见tomcat中web.xml文件 protected Set allowedTypesSet...','struts2','Struts2文件上传',164),(16,1,'<p>随着Annotation的流行，一些主流框架都加入了对Annotation的支持。使用Annotation能够简化很多配置工作，能够很大程度上提高程序开发的效率。本文将 Spring 2.5 新增的 Sping MVC 注解功能，介绍如何使用注解配置替换传统的基于 XML 的 Spring MVC 配置。 弃用了struts，用spring mvc框架做了几个项目，感觉都不错，而且使用了注解方式，可以省掉一大堆配置文件。本文主要介绍使用注解方式配置的spring mvc。</p><h5><b>@Controller</b></h5><p>@Controller 负责注册一个bean到spring上下文中，bean的ID默认为类名称开头字母小写,你也可以自己指定，如下：</p><pre><code><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//方法一： </span>\r\n<span class=\"hljs-annotation\">@Controller</span> \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">class</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">TestController</span> </span>{} \r\n\r\n<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//方法二：            </span>\r\n<span class=\"hljs-annotation\">@Controller</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"tmpController\"</span>) \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">class</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">TestController</span> </span>{}</code></pre><h5><b>@RequestMapping</b></h5><ol><li>@RequestMapping用来定义访问的URL，你可以为整个类定义一个@RequestMapping，或者为每个方法指定一个。<br>把@RequestMapping放在类级别上，这可令它与方法级别上的@RequestMapping注解协同工作，取得缩小选择范围的效果。 例如：</li></ol><pre><code><span class=\"hljs-annotation\">@RequestMapping</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"/test\"</span>) \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">class</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">TestController</span> </span>{}</code></pre><blockquote><p>该类下的所有访问路径都在/test之下。</p></blockquote><ol><li>将@RequestMapping用于整个类不是必须的，如果没有配置，所有的方法的访问路径配置将是完全独立的，没有任何关联。</li><li>完整的参数项为：@RequestMapping(value=\"\",method={\"\",\"\"},headers={},params={\"\",\"\"})，各参数说明如下：<br>value&nbsp;:String[] 设置访问地址<br>method: RequestMethod[]设置访问方式，字符数组，查看RequestMethod类，包括GET, HEAD, POST, PUT, DELETE, OPTIONS, TRACE,常用RequestMethod.GET，RequestMethod.POST<br>headers:String[] headers一般结合method = RequestMethod.POST使用<br>params: String[] 访问参数设置，字符数组 例如：userId=id</li><li>value的配置还可以采用模版变量的形式，例如： @RequestMapping(value=\"/owners/{ownerId}\",method=RequestMethod.GET)这点将在介绍@PathVariable中详细说明。</li><li>@RequestMapping params的补充说明，你可以通过设置参数条件来限制访问地址，例如params=\"myParam=myValue\"表达式，访问地址中参数只有包含了该规定的值\"myParam=myValue\"才能匹配得上，类似\"myParam\"之类的表达式也是支持的，表示当前请求的地址必须有该参数(参数的值可以是任意)，\"!myParam\"之类的表达式表明当前请求的地址不能包含具体指定的参数\"myParam\"。</li><li>有一点需要注意的，如果为类定义了访问地址为*.do,*.html之类的，则在方法级的@RequestMapping，不能再定义value值，否则会报错，例如:</li></ol><pre><code><span class=\"hljs-annotation\">@RequestMapping</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"/bbs.do\"</span>)  \r\n<span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">class</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: 700;\">BbsController</span> </span>{  \r\n    <span class=\"hljs-annotation\">@RequestMapping</span>(params = <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"method=getList\"</span>)  \r\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getList</span><span class=\"hljs-params\">()</span> </span>{  \r\n     <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"list\"</span>;  \r\n    }  \r\n<span class=\"hljs-annotation\">@RequestMapping</span>(value= <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"/spList\"</span>)  \r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">getSpecialList</span><span class=\"hljs-params\">()</span> </span>{  \r\n     <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"splist\"</span>;  \r\n    }  \r\n}</code></pre><blockquote><p>如上例：/bbs.do?method=getList可以访问到方法getList()；而访问/bbs.do/spList则会报错.</p></blockquote><h5><b>@PathVariable</b></h5><ol><li>@PathVariable用于方法中的参数，表示方法参数绑定到地址URL的模板变量。</li></ol><pre><code><span class=\"hljs-annotation\">@RequestMapping</span>(value=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"/owners/{ownerId}\"</span>, method=RequestMethod.GET)  \r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">findOwner</span><span class=\"hljs-params\">( , Model model)</span> </span>{  \r\n  Owner owner = ownerService.findOwner(ownerId);    \r\n  model.addAttribute(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"owner\"</span>, owner);    \r\n  <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"displayOwner\"</span>;  \r\n}</code></pre><ol><li>@PathVariable用于地址栏使用{xxx}模版变量时使用。如果@RequestMapping没有定义类似\"/{ownerId}\" ，这种变量，则使用在方法中@PathVariable会报错。</li></ol><h5><b>@ModelAttribute</b></h5><ol><li>应用于方法参数,参数可以在页面直接获取，相当于request.setAttribute(,)</li><li>应用于方法,将任何一个拥有返回值的方法标注上@ModelAttribute，使其返回值将会进入到模型对象的属性列表中.</li><li>应用于方法参数时@ModelAttribute(\"xx\"),须关联到Object的数据类型，基本数据类型 如：int,String不起作用</li></ol><pre><code><span class=\"hljs-annotation\">@ModelAttribute</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"items\"</span>)<span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//&lt;——①向模型对象中添加一个名为items的属性  </span>\r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> List<string> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">populateItems</span><span class=\"hljs-params\">()</span> </string></span>{  \r\n        List<string> lists = <span class=\"hljs-keyword\" style=\"font-weight: 700;\">new</span> ArrayList<string>();  \r\n        lists.add(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"item1\"</span>);  \r\n        lists.add(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"item2\"</span>);  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> lists;  \r\n}  \r\n<span class=\"hljs-annotation\">@RequestMapping</span>(params = <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"method=listAllBoard\"</span>)  \r\n<span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: 700;\">public</span> String <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: 700;\">listAllBoard</span><span class=\"hljs-params\">(@ModelAttribute(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"currUser\"</span>)</span>User user, ModelMap model) </span>{  \r\n        bbtForumService.getAllBoard();  \r\n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">//&lt;——②在此访问模型中的items属性  </span>\r\n        System.out.println(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"model.items:\"</span> + ((List<string>)model.get(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"items\"</span>)).size());  \r\n        <span class=\"hljs-keyword\" style=\"font-weight: 700;\">return</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"listBoard\"</span>;  \r\n}</string></string></string></code></pre><blockquote><p>在 ① 处，通过使用 @ModelAttribute注解，populateItem()方法将在任何请求处理方法执行前调用，Spring MVC会将该方法返回值以“items”为名放入到隐含的模型对象属性列表中。 所以在 ② 处，我们就可以通过ModelMap入参访问到items属性，当执行listAllBoard() 请求处理方法时，②处将在控制台打印出“model.items:2”的信息。当然我们也可以在请求的视图中访问到模型对象中的 items 属性。</p></blockquote><h5><b>@ResponseBody</b></h5><p>这个注解可以直接放在方法上，表示返回类型将会直接作为HTTP响应字节流输出(不被放置在Model，也不被拦截为视图页面名称)。可以用于ajax。</p><h5><b>@RequestParam</b></h5><p>@RequestParam是一个可选参数，例如：@RequestParam(\"id\")注解，所以它将和URL所带参数 id进行绑定如果入参是基本数据类型（如int、long、float等），URL请求参数中一定要有对应的参数，否则将抛出org.springframework.web.util.NestedServletException 异常，提示无法将 null 转换为基本数据类型.</p><blockquote><p>@RequestParam包含3个配置 @RequestParam(required = ,value=\"\", defaultValue=\"\")<br>required :参数是否必须，boolean类型,可选项，默认为true<br>value: 传递的参数名称，String类型,可选项，如果有值，对应到设置方法的参数<br>defaultValue:String类型,参数没有传递时为参数默认指定的值</p></blockquote><h5><b>@SessionAttributes</b></h5><p>Spring 允许我们有选择地指定ModelMap中的哪些属性需要转存到session中，以便下一个请求属对应的ModelMap的属性列表中还能访问到这些属性。这一功能是通过类定义处标注 @SessionAttributes 注解来实现的。@SessionAttributes 只能声明在类上，而不能声明在方法上。 例如：</p><pre><code><span class=\"hljs-annotation\">@SessionAttributes</span>(<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"currUser\"</span>) <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136); font-style: italic;\">// 将ModelMap 中属性名为currUser 的属性 </span>\r\n<span class=\"hljs-annotation\">@SessionAttributes</span>({<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"attr1\"</span>,<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"attr2\"</span>}) \r\n<span class=\"hljs-annotation\">@SessionAttributes</span>(types = User.class) \r\n<span class=\"hljs-annotation\">@SessionAttributes</span>(types = {User.class,Dept.class}) \r\n<span class=\"hljs-annotation\">@SessionAttributes</span>(types = {User.class,Dept.class},value={<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"attr1\"</span>,<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"attr2\"</span>}) \r\n\r\n\r\n<span class=\"hljs-annotation\">@CookieValue</span> 获取cookie信息 \r\n<span class=\"hljs-annotation\">@RequestHeader</span> 获取请求的头部信息\r\n<span class=\"hljs-annotation\">@ControllerAdvice</span> 全局异常处理器 和<span class=\"hljs-annotation\">@ExceptionHandler</span>配合使用</code></pre>','2017-03-06 13:53:16',0,1,0,0,'随着Annotation的流行，一些主流框架都加入了对Annotation的支持。使用Annotation能够简化很多配置工作，能够很大程度上提高程序开发的效率。本文将 Spring 2.5 新增的 Sping MVC 注解功能，介绍如何使用注解配置替换传统的基于 XML 的 Spring MVC 配置。 弃用了struts，用spring mvc框架做了几个项目，感觉都不错，而且使用了注解方式，可以省掉一大堆配置文件。本文主要介绍使用注解方式配置的spring mvc。@Controller@Controller 负责注册一个bean到spring上下文中，bean的ID默认为类名称开头字母...','springmvc','springmvc常用注解详解',159),(17,1,'<table><colgroup><col width=\"NaN%\"><col width=\"NaN%\"></colgroup><thead><tr><th>生命周期</th><th>阶段描述</th></tr></thead><tbody><tr><td>validate</td><td>验证项目是否正确，以及所有为了完整构建必要的信息是否可用</td></tr><tr><td>generate-sources</td><td>生成所有需要包含在编译过程中的源代码</td></tr><tr><td>process-sources</td><td>处理源代码，比如过滤一些值</td></tr><tr><td>generate-resources</td><td>生成所有需要包含在打包过程中的资源文件</td></tr><tr><td>process-resources</td><td>复制并处理资源文件至目标目录，准备打包</td></tr><tr><td>compile</td><td>编译项目的源代码</td></tr><tr><td>process-classes</td><td>后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）</td></tr><tr><td>generate-test-sources</td><td>生成所有包含在测试编译过程中的测试源码</td></tr><tr><td>process-test-sources</td><td>处理测试源码，比如过滤一些值</td></tr><tr><td>generate-test-resources</td><td>生成测试需要的资源文件</td></tr><tr><td>process-test-resources</td><td>复制并处理测试资源文件至测试目标目录</td></tr><tr><td>test-compile</td><td>编译测试源码至测试目标目录</td></tr><tr><td>test</td><td>使用合适的单元测试框架运行测试。这些测试应该不需要代码被打包或发布</td></tr><tr><td>prepare-package</td><td>在真正的打包之前，执行一些准备打包必要的操作。这通常会产生一个包的展开的处理过的版本（将会在Maven 2.1+中实现）</td></tr><tr><td>package</td><td>将编译好的代码打包成可分发的格式，如JAR，WAR，或者EAR</td></tr><tr><td>pre-integration-test</td><td>执行一些在集成测试运行之前需要的动作。如建立集成测试需要的环境</td></tr><tr><td>integration-test</td><td>如果有必要的话，处理包并发布至集成测试可以运行的环境</td></tr><tr><td>post-integration-test</td><td>执行一些在集成测试运行之后需要的动作。如清理集成测试环境。</td></tr><tr><td>verify</td><td>执行所有检查，验证包是有效的，符合质量规范</td></tr><tr><td>install</td><td>安装包至本地仓库，以备本地的其它项目作为依赖使用</td></tr><tr><td>deploy</td><td>复制最终的包至远程仓库，共享给其它开发人员和项目（通常和一次正式的发布相关）</td></tr></tbody></table>','2017-03-24 14:17:06',0,1,0,0,'生命周期阶段描述validate验证项目是否正确，以及所有为了完整构建必要的信息是否可用generate-sources生成所有需要包含在编译过程中的源代码process-sources处理源代码，比如过滤一些值generate-resources生成所有需要包含在打包过程中的资源文件process-resources复制并处理资源文件至目标目录，准备打包compile编译项目的源代码process-classes后处理编译生成的文件，例如对Java类进行字节码增强（bytecode enhancement）generate-test-sources生成所有包含在测试编译过程中的测试源码pro...','maven','maven生命周期各阶段描述',133),(18,1,'<p>方式一：制定maven插件编译的时候使用的jdk版本。</p><pre><code class=\"lang-html\"><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">build</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">finalName</span>&gt;</span>Blog<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">finalName</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">plugins</span>&gt;</span>  \r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">plugin</span>&gt;</span>  \r\n            <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">groupId</span>&gt;</span>  \r\n            <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">artifactId</span>&gt;</span>  \r\n            <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">version</span>&gt;</span>2.0.2<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">version</span>&gt;</span>  \r\n            <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">configuration</span>&gt;</span>  \r\n                <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">source</span>&gt;</span>1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">source</span>&gt;</span>  \r\n                <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">target</span>&gt;</span>1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">target</span>&gt;</span>  \r\n            <span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">configuration</span>&gt;</span>  \r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">plugin</span>&gt;</span>  \r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">plugins</span>&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">build</span>&gt;</span></code></pre><p>方式二：制定项目全局jdk版本。</p><pre><code class=\"lang-html\"><span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">profile</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">id</span>&gt;</span>jdk-1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">id</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">activation</span>&gt;</span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">activeByDefault</span>&gt;</span>true<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">activeByDefault</span>&gt;</span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">jdk</span>&gt;</span>1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">jdk</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">activation</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">properties</span>&gt;</span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">maven.compiler.source</span>&gt;</span>1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">maven.compiler.source</span>&gt;</span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">maven.compiler.target</span>&gt;</span>1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">maven.compiler.target</span>&gt;</span>\r\n        <span class=\"hljs-tag\" style=\"color: navy;\">&lt;<span class=\"hljs-title\">maven.compiler.compilerVersion</span>&gt;</span>1.6<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">maven.compiler.compilerVersion</span>&gt;</span>\r\n    <span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">properties</span>&gt;</span>\r\n<span class=\"hljs-tag\" style=\"color: navy;\">&lt;/<span class=\"hljs-title\">profile</span>&gt;</span></code></pre>','2017-03-24 14:19:16',0,1,0,0,'方式一：制定maven插件编译的时候使用的jdk版本。&lt;build&gt; &lt;finalName&gt;Blog&lt;/finalName&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;2.0.2&lt;/version&gt; &lt;configuration&gt; &lt;source&gt;...','maven','maven项目指定jdk版本',128);

/*Data for the table `tb_tag` */

insert  into `tb_tag`(`id`,`name`,`status`,`count`,`description`) values (4,'nginx',0,1,NULL),(5,'maven',0,3,NULL),(6,'spring',0,6,NULL),(7,'quartz',0,2,NULL),(8,'springboot',0,2,NULL),(9,'linux',0,0,NULL),(10,'javascript',0,0,NULL),(11,'jqgrid',0,1,NULL),(12,'springdata',0,1,NULL),(13,'jpa',0,2,NULL),(14,'lucene',0,3,NULL),(15,'java',0,1,NULL),(16,'struts2',0,2,NULL),(17,'springmvc',0,1,NULL);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
