/*
SQLyog Ultimate v11.24 (32 bit)
MySQL - 5.6.35 : Database - jfinalblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`jfinalblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `jfinalblog`;

/*Table structure for table `tb_blog` */

DROP TABLE IF EXISTS `tb_blog`;

CREATE TABLE `tb_blog` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `authorId` bigint(20) DEFAULT NULL,
  `content` longtext,
  `createAt` datetime DEFAULT NULL,
  `featured` int(11) NOT NULL,
  `category` int(11) DEFAULT NULL,
  `privacy` int(11) NOT NULL,
  `status` int(11) NOT NULL,
  `summary` varchar(600) DEFAULT NULL,
  `tags` varchar(255) DEFAULT NULL,
  `title` varchar(64) DEFAULT NULL,
  `views` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

/*Data for the table `tb_blog` */

insert  into `tb_blog`(`id`,`authorId`,`content`,`createAt`,`featured`,`category`,`privacy`,`status`,`summary`,`tags`,`title`,`views`) values (1,1,'<p>1.Nginx 简介</p><p>Nginx (&quot;engine x&quot;) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx</p><p>是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站点开发的，它已经在该站点运行超过两年半了。 Igor 将</p><p>源代码以类 BSD 许可证的形式发布。尽管还是测试版，但是，Nginx 已经因为它的稳定性、丰富的功能集、示例配置</p><p>文件和低系统资源的消耗而闻名了。</p><p>&nbsp;&nbsp; Nginx采用最新的epoll（Linux 2.6内核）和kqueue(freebsd)网络I/O模型，而Apache则使用的是传统的select</p><p>模型。目前Linux下能够承受高并方访问的Squid、Memcached都是采用是epoll网络I/O模型。</p><p>2.使用 Nginx 前必须了解的事项</p><p>1.目前官方 Nginx 并不支持 Windows，您只能在包括 Linux、UNIX、BSD 系统下安装和使用；<br/>2.Nginx 本身只是一个 HTTP 和反向代理服务器，它无法像 Apache 一样通过安装各种模块来支持不同的页面脚本，</p><p>例如 PHP、CGI 等；<br/>3.Nginx 支持简单的负载均衡和容错；<br/>4.支持作为基本 HTTP 服务器的功能，例如日志、压缩、Byte ranges、Chunked responses、SSL、虚拟主机等等，</p><p>应有尽有。</p><p>3.下载介质<br/>&nbsp;&nbsp; Nginx部署之前，首先根据项目的需要选择需要安装的组件，实际环境一般会考虑需要支持gzip压缩和rewrite模</p><p>块。所以安装的第一步是下载Ngix及Ngix的相关组件。<br/>1) Nginx本身<br/>&nbsp;&nbsp; 下载地址：http://nginx.org/en/download.html<br/>&nbsp;&nbsp; 建议下载最新版本介质，目前最新的是：1.0.2<br/>2) gzip压缩依赖库：zlib<br/>&nbsp;&nbsp; 下载地址:http://www.zlib.net<br/>&nbsp;&nbsp; 下载版本：Version 1.2.5<br/>3)Rewrite模块的正则表达式依赖库:pcre<br/>&nbsp;&nbsp; pcre库简称：Perl兼容正则表达式<br/>&nbsp;&nbsp; 下载地址：http://www.pcre.org<br/>&nbsp;&nbsp; 下载版本：pcre-8.02<br/>&nbsp;</p><p>4.开始安装</p><p><br/></p><p>1) .安装&nbsp;pcre</p><p>tar -zxvf pcre-8.02.tar.gz<br/>./configure<br/>make<br/>make install<br/>默认安装到/usr/local/lib下即可。<br/>安装完成后可以#ls -l /usr/local/lib/libpcre.so</p><p>2）.安装nginx</p><p>tar zxvf nginx-1.0.11.tar.gz</p><p>cd nginx-1.0.11<br/>./configure --prefix=/usr/local/nginx&nbsp; --with-poll_module&nbsp;&nbsp; --with-http_stub_status_module</p><p>make &amp;&amp; make install</p><p>3）管理nginx服务</p><p>启动：</p><p>/usr/local/nginx/sbin/nginx</p><p>停止</p><p>/usr/local/nginx/sbin/nginx -s stop</p><p>重启</p><p>/usr/local/nginx/sbin/nginx&nbsp; -s reload</p><p>查看状态</p><p>netstat -autlp| grep nginx</p><p><br/></p>','2017-01-26 10:41:46',0,1,0,0,'1.Nginx 简介Nginx (&quot;engine x&quot;) 是一个高性能的 HTTP 和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。 Nginx是由 Igor Sysoev 为俄罗斯访问量第二的 Rambler.ru 站...','nginx','CentOS下安装Nginx教程',247),(2,1,'<p>										</p><p><span style=\"font-size:20px;font-family:Microsoft YaHei,STXihei;font-weight:bold\">maven中引入oracle驱动报错Missing artifact com.oracle:ojdbc14:jar:10.2.0.4.0</span></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei;color:#888888\">时间:2015年09月22日&nbsp;&nbsp;浏览:7747次</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">在maven中央库中查找ojdbc，发现最新的版本是10.2.0.4.0，然后在maven项目中引入ojdbc，发现报错Missing artifact com.oracle:ojdbc14:jar:10.2.0.4.0，如下图1所示：</span></p><p><img src=\"/upload/img/blog/1_20170214151248.png\" title=\"1_20170214151248.png\" alt=\"1.png\"/></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei\">图1：Missing artifact</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">发现中央库中明明是有的，但是在项目中却怎么都引入不进来。后来在网上找到解决方案，原来是因为oracle的ojdbc.jar是收费的，所以maven的中央仓库中没有这个资源，只能通过配置本地库才能加载到项目中去。</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">方法步骤如下：</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei;font-weight:bold\">Step 1</span><span style=\"font-family:Microsoft YaHei,STXihei\">：去oracle官网下载ojdbc驱动</span></p><p><img src=\"/upload/img/blog/1_20170214151255.png\" title=\"1_20170214151255.png\" alt=\"2.png\"/></p><p><span style=\"font-family: &#39;Microsoft YaHei&#39;, STXihei; font-size: 12px;\">图2：下载ojdbc6.jar</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">最新的是ojdbc7.jar，我这里就下载ojdbc6.jar好了。</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei;font-weight:bold\">Step 2</span><span style=\"font-family:Microsoft YaHei,STXihei\">：安装到本地仓库</span></p><p><img src=\"/upload/img/blog/1_20170214151300.png\" title=\"1_20170214151300.png\" alt=\"3.png\"/></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei\">图3：安装至本地仓库</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">将下载好的ojdbc6.jar复制到系统默认的用户目录下，我的用户目录是C:\\Users\\YEDWARD，然后在该目录下打开命令窗口，然后输入如下命令：</span></p><p><span style=\"font-size:12px;font-family:consolas;color:#333333;background-color:#fbfbfb\">mvn&nbsp;install:install-file&nbsp;-DgroupId=com.oracle&nbsp;-DartifactId=ojdbc14&nbsp;-Dversion=10.2.0.4.0&nbsp;-Dpackaging=jar&nbsp;-Dfile=ojdbc6.jar</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">如上图3所示，如果出现了BUILD SUCCESS，则说明安装到本地仓库成功了，这时去本地仓库看下，如下图4所示，会发现已经被成功的安装进来了。</span></p><p><img src=\"/upload/img/blog/1_20170214151306.png\" title=\"1_20170214151306.png\" alt=\"4.png\"/></p><p><span style=\"font-size:12px;font-family:Microsoft YaHei,STXihei\">图4：安装成功</span></p><p><span style=\"font-family:Microsoft YaHei,STXihei\">如上图4所示，已经成功安装了，并且名字都被改了。这个时候，再去项目的pom.xml中引入，就会发现一切都正常了。</span></p><p><br/></p><p>\r\n									</p>','2017-01-26 10:41:46',0,1,0,0,'maven中引入oracle驱动报错Missing artifact com.oracle:ojdbc14:jar:10.2.0.4.0时间:2015年09月22日&amp;nbsp;&amp;nbsp;浏览:7747次在maven中央库中查找ojdbc，发现最...','maven','安装ojdbc驱动到本地MAVEN库',267),(3,1,'<p>Spring+Quartz实现定时任务有基于配置文件和基于注解两种方式，本文是关于使用配置文件实现定时任务的示例。</p><p>①编写需要调度的类</p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.study;\r\nimport&nbsp;org.springframework.scheduling.annotation.Scheduled;\r\nimport&nbsp;org.springframework.stereotype.Component;\r\npublic&nbsp;class&nbsp;QuartzJob&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;QuartzJob(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartzjob创建成功&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;run(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartz执行的任务调度&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">②设置配置文件spring-quartz.xml</span></p><pre class=\"brush:java;toolbar:false\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;定义导出交易商基础信息表任务调度--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;1、实例化需要进行任务调度的对象&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queryFirmJob&quot;&nbsp;class=&quot;gnnt.MEBS.pushSystem.job.QueryFirmJob&quot;&gt;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;2、定义调用对象和调用对象的方法&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queryFirmJobTask&quot;&nbsp;class=&quot;org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;调用的类&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;targetObject&quot;&nbsp;ref=&quot;queryFirmJob&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;调用类中的方法&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;targetMethod&quot;&nbsp;value=&quot;run&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;是否并发执行&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;concurrent&quot;&nbsp;value=&quot;false&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;3、定义触发时间&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;queryFirmJobCronTriggerBean&quot;&nbsp;class=&quot;org.springframework.scheduling.quartz.CronTriggerBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;jobDetail&quot;&nbsp;ref=&quot;queryFirmJobTask&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;cron表达式&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;cronExpression&quot;&nbsp;value=&quot;0&nbsp;0&nbsp;20&nbsp;*&nbsp;*&nbsp;?&quot;&gt;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--定义任务调度--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;总管理类&nbsp;如果将lazy-init=&#39;false&#39;那么容器启动就会执行调度程序&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean&nbsp;id=&quot;startQuertz&quot;&nbsp;lazy-init=&quot;false&quot;&nbsp;autowire=&quot;no&quot;&nbsp;class=&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;triggers&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ref&nbsp;bean=&quot;queryFirmJobCronTriggerBean&quot;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">③启动spring容器</span><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.study;\r\nimport&nbsp;org.springframework.context.ApplicationContext;\r\nimport&nbsp;org.springframework.context.support.ClassPathXmlApplicationContext;\r\npublic&nbsp;class&nbsp;Test&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;启动spring容器&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationContext&nbsp;ac&nbsp;=&nbsp;newClassPathXmlApplicationContext(&quot;classpath:spring-quartz.xml&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p>','2017-01-26 10:41:46',0,1,0,0,'Spring+Quartz实现定时任务有基于配置文件和基于注解两种方式，本文是关于使用配置文件实现定时任务的示例。①编写需要调度的类package&amp;nbsp;com.study; import&amp;nbsp;org.springframework.s...','spring,quartz','spring Quartz基于配置文件实现',236),(4,1,'<p>本文主要是Spring整合Quartz的注解实现方式示例。</p><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">①配置需要调度的类，并添加注解</span></p><pre class=\"brush:java;toolbar:false\">package&nbsp;com.study;\r\nimport&nbsp;org.springframework.scheduling.annotation.Scheduled;\r\nimport&nbsp;org.springframework.stereotype.Component;\r\n@Component\r\npublic&nbsp;class&nbsp;QuartzJob&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;QuartzJob(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartzjob创建成功&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Scheduled(cron&nbsp;=&nbsp;&quot;0/1&nbsp;*&nbsp;*&nbsp;&nbsp;*&nbsp;*&nbsp;?&nbsp;&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;voidrun(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;Quartz执行的任务调度&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">②添加配置文件</span><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p><pre class=\"brush:java;toolbar:false\">&lt;beans&nbsp;xmlns=&quot;http://www.springframework.org/schema/beans&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:task=&quot;http://www.springframework.org/schema/task&quot;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:p=&quot;http://www.springframework.org/schema/p&quot;&nbsp;xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;&nbsp;xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/task\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/task/spring-task-3.0.xsd&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/context/spring-context-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/tx/spring-tx-3.0.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/mvc/spring-mvc.xsd\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.springframework.org/schema/aop/spring-aop-3.0.xsd&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:component-scan&nbsp;base-package=&quot;gnnt.MEBS.pushSystem.job&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;task:executor&nbsp;id=&quot;executor&quot;&nbsp;pool-size=&quot;5&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;task:scheduler&nbsp;id=&quot;scheduler&quot;&nbsp;pool-size=&quot;10&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;task:annotation-driven&nbsp;executor=&quot;executor&quot;&nbsp;scheduler=&quot;scheduler&quot;&nbsp;/&gt;\r\n&lt;/beans&gt;</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\">③启动容器，这里通过配置web.xml启动</span><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p><pre class=\"brush:java;toolbar:false\">&lt;web-app&nbsp;version=&quot;2.5&quot;&nbsp;xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;&nbsp;xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&nbsp;xsi:schemalocation=&quot;http://java.sun.com/xml/ns/javaee&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;context-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;classpath:spring-quartz2.xml&lt;/param-value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/context-param&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/listener&gt;\r\n&lt;/web-app&gt;</pre><p><span style=\"font-family: 微软雅黑; font-size: 14px; line-height: 21px; background-color: rgb(255, 255, 255);\"></span><br/></p>','2017-01-26 10:41:46',0,1,0,0,'本文主要是Spring整合Quartz的注解实现方式示例。①配置需要调度的类，并添加注解package&amp;nbsp;com.study; import&amp;nbsp;org.springframework.scheduling.annotation.S...','spring,quartz','spring Quartz基于注解实现',232),(5,1,'<p>springboot项目支持标准的servlet3.0容器部署，也就是打成war包，使用例如Tomcat的方式进行部署。同时，springboot更加推荐自己新引入的服务部署方式，即使用jar包部署。本文主要展示使用jar的部署方式。</p><p>1、使用maven构建项目，在pom.xml文件中加入插件如下所示：</p><pre class=\"brush:xml;toolbar:false;\">&lt;plugin&gt;\r\n	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n	&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\r\n	&lt;configuration&gt;\r\n		&lt;mainClass&gt;net.sppan.something.Application&lt;/mainClass&gt;\r\n		&lt;fork&gt;true&lt;/fork&gt;\r\n	&lt;/configuration&gt;\r\n&lt;/plugin&gt;</pre><p>2、如果项目中classpath根目录以外还存在xml文件，例如mybatis的mapper文件等，需要在maven中进行一下资源文件的包含。</p><pre class=\"brush:xml;toolbar:false\">&lt;resources&gt;\r\n	&lt;resource&gt;\r\n		&lt;directory&gt;src/main/java&lt;/directory&gt;\r\n		&lt;includes&gt;\r\n			&lt;include&gt;**/*.xml&lt;/include&gt;\r\n		&lt;/includes&gt;\r\n	&lt;/resource&gt;\r\n	&lt;resource&gt;\r\n		&lt;directory&gt;src/main/resources&lt;/directory&gt;\r\n	&lt;/resource&gt;\r\n&lt;/resources&gt;</pre><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><strong>需要注意的是</strong></span>：在maven中，默认包含了<span style=\"color: rgb(255, 0, 0);\">src/main/resources</span>如果使用了resource标签，会覆盖默认行为，所以上面不但要包含<span style=\"color: rgb(255, 0, 0);\">src/main/java</span>，还需要src/main/srouces。</p><p>3、修改pom.xml中的打包方式为jar。</p><pre class=\"brush:xml;toolbar:false\">&lt;packaging&gt;jar&lt;/packaging&gt;</pre><p>4、使用maven进行打包（maven package<span>）即可得到可以运行的jar包。</span></p>','2017-01-26 10:41:46',0,1,0,0,'springboot项目支持标准的servlet3.0容器部署，也就是打成war包，使用例如Tomcat的方式进行部署。同时，springboot更加推荐自己新引入的服务部署方式，即使用jar包部署。本文主要展示使用jar的部署方式。1、使用ma...','springboot','springboot项目jar发布',247),(6,1,'<p>1、启动脚本start.sh:<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nrm&nbsp;-f&nbsp;tpid\r\nnohup&nbsp;java&nbsp;-jar&nbsp;something.jar&nbsp;--spring.config.location=application.properties&nbsp;&gt;&nbsp;/dev/null&nbsp;2&gt;&amp;1&nbsp;&amp;\r\necho&nbsp;$!&nbsp;&gt;&nbsp;tpid\r\necho&nbsp;something&nbsp;Start&nbsp;Success!</pre><p>2、服务检查脚本check.sh：<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nAPP_NAME=something\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;something&nbsp;is&nbsp;running.&#39;\r\nelse\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;something&nbsp;is&nbsp;NOT&nbsp;running.&#39;\r\nfi</pre><p>3、服务停止脚本stop.sh:<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nAPP_NAME=something\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Stop&nbsp;Process...&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-15&nbsp;$tpid\r\nfi\r\nsleep&nbsp;5\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Kill&nbsp;Process!&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;$tpid\r\nelse\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Stop&nbsp;Success!&#39;\r\nfi</pre><p>4、杀进程脚本kill.sh:<br/></p><pre class=\"brush:ps;toolbar:false\">#!/bin/sh\r\nAPP_NAME=something\r\ntpid=`ps&nbsp;-ef|grep&nbsp;$APP_NAME|grep&nbsp;-v&nbsp;grep|grep&nbsp;-v&nbsp;kill|awk&nbsp;&#39;{print&nbsp;$2}&#39;`\r\nif&nbsp;[&nbsp;${tpid}&nbsp;];&nbsp;then\r\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Kill&nbsp;Process!&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;kill&nbsp;-9&nbsp;$tpid\r\nfi</pre><p><span style=\"color: rgb(255, 0, 0);\"><strong>需要注意的是：</strong></span></p><p>如果是在Windows上面新建的脚本，在Linux执行时可能会出现如下错误。</p><pre class=\"brush:ps;toolbar:false\">/bin/sh^M:&nbsp;bad&nbsp;interpreter:&nbsp;No&nbsp;such&nbsp;file&nbsp;or&nbsp;directory。</pre><p>这是因为不同系统编码格式引起的：在windows系统中编辑的.sh文件可能有不可见字符，所以在Linux系统下执行会报以上异常信息。</p><p>解决方案：</p><p>1、使用vi编辑器打开脚本文件，以start.sh为例：</p><pre class=\"brush:ps;toolbar:false\">vi&nbsp;start.sh</pre><p>2、利用如下命令查看文件格式。出现结果为fileformat=dos 或 fileformat=unix :</p><pre class=\"brush:ps;toolbar:false\">:set&nbsp;ff&nbsp;或&nbsp;:set&nbsp;fileformat</pre><p>3、利用如下命令修改文件格式:</p><pre class=\"brush:ps;toolbar:false\">set&nbsp;ff=unix&nbsp;或&nbsp;:set&nbsp;fileformat=unix</pre><p>4、保存退出：<br/></p><pre class=\"brush:ps;toolbar:false\">:wq</pre><p><br/></p>','2017-01-26 10:41:46',0,1,0,0,'1、启动脚本start.sh:#!/bin/sh rm&amp;nbsp;-f&amp;nbsp;tpid nohup&amp;nbsp;java&amp;nbsp;-jar&amp;nbsp;something.jar&amp;nbsp;--spring.config.location=ap...','springboot','springboot项目Linux服务脚本',231),(7,1,'<p>jsonReader是jqGrid的一个重要选项，用于设置如何解析从Server端发回来的json数据，如果Server返回的是xml数据，则对应的使用xmlReader来解析。jsonReader的默认值为：</p><pre class=\"brush:js;toolbar:false\">jsonReader:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;&quot;rows&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表实际模型数据的入口\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page:&nbsp;&quot;page&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表当前页码的数据\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total:&nbsp;&quot;total&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表页码总数的数据\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;records:&nbsp;&quot;records&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;json中代表数据行总数的数据\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeatitems:&nbsp;true,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;如果设为false，则jqGrid在解析json时，会根据name来搜索对应的数据元素（即可以json中元素可以不按顺序）；而所使用的name是来自于colModel中的name设定。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell:&nbsp;&quot;cell&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;&quot;id&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userdata:&nbsp;&quot;userdata&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subgrid:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;&quot;rows&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;repeatitems:&nbsp;true,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell:&nbsp;&quot;cell&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>假如有下面一个json字符串：</p><pre class=\"brush:java;toolbar:false\">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;totalpages&quot;:&nbsp;&quot;3&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;currpage&quot;:&nbsp;&quot;1&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;totalrecords&quot;:&nbsp;&quot;11&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;griddata&quot;:&nbsp;[\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SalesReasonID&quot;:&nbsp;&quot;1&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Name&quot;:&nbsp;&quot;Price&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ReasonType&quot;:&nbsp;&quot;Other&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ModifiedDate&quot;:&nbsp;&quot;1998年6月1日&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SalesReasonID&quot;:&nbsp;&quot;2&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Name&quot;:&nbsp;&quot;On&nbsp;Promotion&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ReasonType&quot;:&nbsp;&quot;Promotion&quot;,&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ModifiedDate&quot;:&nbsp;&quot;1998年6月1日&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;]}</pre>其对应的jsonReader为：<pre class=\"brush:js;toolbar:false\">jsonReader:&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;root:&nbsp;&quot;griddata&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;total:&nbsp;&quot;totalpages&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;page:&nbsp;&quot;currpage&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;records:&nbsp;&quot;totalrecords&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;repeatitems:&nbsp;false\r\n}</pre><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\">注：cell、id在repeatitems为true时可以用到，即每一个记录是由一对id和cell组合而成，一般比较少用到。</span><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);\"></span><br/></span></p><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><br/></span></p><p><span style=\"color: rgb(255, 0, 0); background-color: rgb(255, 255, 255);\"><br/></span></p>','2017-01-26 10:41:46',0,1,0,0,'jsonReader是jqGrid的一个重要选项，用于设置如何解析从Server端发回来的json数据，如果Server返回的是xml数据，则对应的使用xmlReader来解析。jsonReader的默认值为：jsonReader:&amp;nbsp;{...','jqgrid','jqgrid解析服务端分页数据',314),(8,1,'<p>										</p><p>转自：http://chenjumin.iteye.com/blog/355544</p><p>介绍以下类接口：</p><p>&nbsp; &nbsp; ApplicationContextAware接口、ApplicationEvent抽象类、ApplicationListener接口、BeanNameAware接口、InitializingBean接口、DisposableBean接口。</p><p>一、ApplicationContextAware接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当一个类需要获取ApplicationContext实例时，可以让该类实现ApplicationContextAware接口。代码展示如下：</p><pre class=\"brush:java;toolbar:false\">public&nbsp;class&nbsp;Animal&nbsp;implements&nbsp;ApplicationContextAware,&nbsp;BeanNameAware{\r\n	private&nbsp;String&nbsp;beanName;\r\n	private&nbsp;ApplicationContext&nbsp;applicationContext;\r\n\r\n	public&nbsp;void&nbsp;setBeanName(String&nbsp;name)&nbsp;{\r\n		this.beanName&nbsp;=&nbsp;name;\r\n	}\r\n	\r\n	/**\r\n	&nbsp;*&nbsp;@param&nbsp;applicationContext&nbsp;该参数将由Spring容器自动赋值\r\n	&nbsp;*/\r\n	public&nbsp;void&nbsp;setApplicationContext(ApplicationContext&nbsp;applicationContext)throws&nbsp;BeansException&nbsp;{\r\n		this.applicationContext&nbsp;=&nbsp;applicationContext;\r\n	}\r\n\r\n	public&nbsp;void&nbsp;run(){\r\n		System.out.println(beanName);\r\n		\r\n		//发布自定义事件\r\n		AnimalEvent&nbsp;event&nbsp;=&nbsp;new&nbsp;AnimalEvent(this,&nbsp;&quot;老虎&quot;);\r\n		applicationContext.publishEvent(event);\r\n	}\r\n}</pre><p>通过@Autowired注解可以自动装配一些常用对象实例：</p><pre class=\"brush:java;toolbar:false\">@Autowired\r\nprivate&nbsp;MessageSource&nbsp;messageSource;&nbsp;\r\n\r\n@Autowired\r\nprivate&nbsp;ResourceLoader&nbsp;resourceLoader;&nbsp;\r\n\r\n@Autowired\r\nprivate&nbsp;ApplicationContext&nbsp;applicationContext;</pre><p>二、ApplicationEvent抽象类</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当需要创建自定义事件时，可以新建一个继承自ApplicationEvent抽象类的类。代码展示如下：</p><pre class=\"brush:java;toolbar:false\">/**\r\n&nbsp;*&nbsp;自定义事件\r\n&nbsp;*/\r\npublic&nbsp;class&nbsp;AnimalEvent&nbsp;extends&nbsp;ApplicationEvent&nbsp;{\r\n	private&nbsp;String&nbsp;name;\r\n	\r\n	public&nbsp;String&nbsp;getName()&nbsp;{\r\n		return&nbsp;name;\r\n	}\r\n\r\n	/**\r\n	&nbsp;*&nbsp;@param&nbsp;source&nbsp;事件源对象\r\n	&nbsp;*/\r\n	public&nbsp;AnimalEvent(Object&nbsp;source){\r\n		super(source);\r\n	}\r\n	\r\n	public&nbsp;AnimalEvent(Object&nbsp;source,&nbsp;String&nbsp;name){\r\n		super(source);\r\n		this.name&nbsp;=&nbsp;name;\r\n	}\r\n}</pre><p>三、ApplicationListener接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当需要监听自定义事件时，可以新建一个实现ApplicationListener接口的类，并将该类配置到Spring容器中。代码展示如下：</p><pre class=\"brush:java;toolbar:false\">/**\r\n&nbsp;*&nbsp;自定义事件监听器\r\n&nbsp;*/\r\npublic&nbsp;class&nbsp;CustomEventListener&nbsp;implements&nbsp;ApplicationListener&nbsp;{\r\n	public&nbsp;void&nbsp;onApplicationEvent(ApplicationEvent&nbsp;event)&nbsp;{\r\n		if(event&nbsp;instanceof&nbsp;AnimalEvent){\r\n			AnimalEvent&nbsp;animalEvent&nbsp;=&nbsp;(AnimalEvent)event;\r\n			System.out.println(&quot;触发自定义事件：Animal&nbsp;name&nbsp;is&nbsp;&quot;&nbsp;+&nbsp;animalEvent.getName());\r\n		}\r\n	}\r\n}</pre><p><span style=\"color: rgb(255, 0, 0);\">注：如果是在springboot项目中，需要监听所有的事件，则需要在application.properties中配置</span></p><pre class=\"brush:java;toolbar:false\">context.listener.classes=net.sppan.base.config.listener.CustomEventListener</pre><p>要发布自定义事件，需要调用ApplicationContext的publishEvent方法，具体用法请看Animal类的源码。</p><p>&nbsp;</p><p>&nbsp;&nbsp; 四、BeanNameAware接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp; 当bean需要获取自身在容器中的id/name时，可以实现BeanNameAware接口。</p><p>&nbsp;</p><p>五、InitializingBean接口</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当需要在bean的全部属性设置成功后做些特殊的处理，可以让该bean实现InitializingBean接口。<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 效果等同于bean的init-method属性的使用或者@PostContsuct注解的使用。<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 三种方式的执行顺序：先注解，然后执行InitializingBean接口中定义的方法，最后执行init-method属性指定的方法。</p><p>&nbsp;</p><p>六、DisposableBean接口<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当需要在bean销毁之前做些特殊的处理，可以让该bean实现DisposableBean接口。<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 效果等同于bean的destroy-method属性的使用或者@PreDestory注解的使用。<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 三种方式的执行顺序：先注解，然后执行DisposableBean接口中定义的方法，最后执行destroy-method属性指定的方法。</p><p><br/></p><p>\r\n									</p>','2017-01-26 10:41:46',1,2,0,0,'转自：http://chenjumin.iteye.com/blog/355544介绍以下类接口：&amp;nbsp; &amp;nbsp; ApplicationContextAware接口、ApplicationEvent抽象类、ApplicationLis...','java','Spring常用的接口和类（一）',228),(9,1,'<p>1、操作符类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;net.sppan.base.service.specification;\r\n\r\n/**\r\n&nbsp;*&nbsp;操作符类，这个类中存储了键值对和操作符号，另外存储了连接下一个条件的类型是and还是or\r\n&nbsp;*&nbsp;&lt;br&gt;\r\n&nbsp;*&nbsp;创建时通过&nbsp;id&gt;=7,其中id就是key,&gt;=就是oper操作符，7就是value\r\n&nbsp;*&nbsp;&lt;br&gt;\r\n&nbsp;*&nbsp;特殊的自定义几个操作符(:表示like&nbsp;%v%，b:表示v%,:b表示%v)\r\n&nbsp;*/\r\npublic&nbsp;class&nbsp;SpecificationOperator&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;操作符的key，如查询时的name,id之类\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;操作符的value，具体要查询的值\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Object&nbsp;value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;操作符，自己定义的一组操作符，用来方便查询\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;oper;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;连接的方式：and或者or\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;join;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getKey()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setKey(String&nbsp;key)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.key&nbsp;=&nbsp;key;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Object&nbsp;getValue()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setValue(Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.value&nbsp;=&nbsp;value;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getOper()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;oper;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setOper(String&nbsp;oper)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.oper&nbsp;=&nbsp;oper;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;getJoin()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;join;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;setJoin(String&nbsp;join)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.join&nbsp;=&nbsp;join;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n	public&nbsp;static&nbsp;enum&nbsp;Operator&nbsp;{\r\n		eq,&nbsp;ge,&nbsp;le,&nbsp;gt,&nbsp;lt,&nbsp;likeL,&nbsp;likeR,&nbsp;likeAll,&nbsp;isNull,&nbsp;isNotNull,&nbsp;notEqual;\r\n		@Override\r\n		public&nbsp;String&nbsp;toString()&nbsp;{\r\n			return&nbsp;name();\r\n		}\r\n	}\r\n	public&nbsp;static&nbsp;enum&nbsp;Join&nbsp;{\r\n		and,&nbsp;or;\r\n		@Override\r\n		public&nbsp;String&nbsp;toString()&nbsp;{\r\n			return&nbsp;name();\r\n		}\r\n	}\r\n}</pre><p>2、Specification实现类：</p><pre class=\"brush:java;toolbar:false\">package&nbsp;net.sppan.base.service.specification;\r\n\r\nimport&nbsp;net.sppan.base.service.specification.SpecificationOperator.Join;\r\n\r\nimport&nbsp;org.springframework.data.jpa.domain.Specification;\r\n\r\nimport&nbsp;javax.persistence.criteria.CriteriaBuilder;\r\nimport&nbsp;javax.persistence.criteria.CriteriaQuery;\r\nimport&nbsp;javax.persistence.criteria.Predicate;\r\nimport&nbsp;javax.persistence.criteria.Root;\r\n\r\nimport&nbsp;java.util.List;\r\n\r\npublic&nbsp;class&nbsp;SimpleSpecification&lt;T&gt;&nbsp;implements&nbsp;Specification&lt;T&gt;&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;查询的条件列表，是一组列表\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;SpecificationOperator&gt;&nbsp;opers;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecification(List&lt;SpecificationOperator&gt;&nbsp;opers)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.opers&nbsp;=&nbsp;opers;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Predicate&nbsp;toPredicate(Root&lt;T&gt;&nbsp;root,&nbsp;CriteriaQuery&lt;?&gt;&nbsp;criteriaQuery,&nbsp;CriteriaBuilder&nbsp;criteriaBuilder)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;index&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//通过resultPre来组合多个条件\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Predicate&nbsp;resultPre&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(SpecificationOperator&nbsp;op:opers)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(index++==0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultPre&nbsp;=&nbsp;generatePredicate(root,criteriaBuilder,op);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Predicate&nbsp;pre&nbsp;=&nbsp;generatePredicate(root,criteriaBuilder,op);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(pre==null)&nbsp;continue;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(Join.and.name().equalsIgnoreCase(op.getJoin()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultPre&nbsp;=&nbsp;criteriaBuilder.and(resultPre,pre);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(Join.or.name().equalsIgnoreCase(op.getJoin()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultPre&nbsp;=&nbsp;criteriaBuilder.or(resultPre,pre);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;resultPre;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Predicate&nbsp;generatePredicate(Root&lt;T&gt;&nbsp;root,CriteriaBuilder&nbsp;criteriaBuilder,&nbsp;SpecificationOperator&nbsp;op)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据不同的操作符返回特定的查询*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(SpecificationOperator.Operator.eq.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.equal(root.get(op.getKey()),op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.ge.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.ge(root.get(op.getKey()).as(Number.class),&nbsp;(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.le.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.le(root.get(op.getKey()).as(Number.class),(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.gt.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.gt(root.get(op.getKey()).as(Number.class),(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.lt.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.lt(root.get(op.getKey()).as(Number.class),(Number)op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.likeAll.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.like(root.get(op.getKey()).as(String.class),&quot;%&quot;+op.getValue()+&quot;%&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.likeL.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.like(root.get(op.getKey()).as(String.class),op.getValue()+&quot;%&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.likeR.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.like(root.get(op.getKey()).as(String.class),&quot;%&quot;+op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.isNull.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.isNull(root.get(op.getKey()));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.isNotNull.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.isNotNull(root.get(op.getKey()));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;if(SpecificationOperator.Operator.notEqual.name().equalsIgnoreCase(op.getOper()))&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;criteriaBuilder.notEqual(root.get(op.getKey()),op.getValue());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n}</pre><p>3、查询条件构造类：<br/></p><pre class=\"brush:java;toolbar:false\">package&nbsp;net.sppan.base.service.specification;\r\n\r\nimport&nbsp;java.util.ArrayList;\r\nimport&nbsp;java.util.List;\r\n\r\nimport&nbsp;net.sppan.base.service.specification.SpecificationOperator.Join;\r\n\r\nimport&nbsp;org.springframework.data.jpa.domain.Specification;\r\n\r\npublic&nbsp;class&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;{\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;条件列表\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;SpecificationOperator&gt;&nbsp;opers;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;构造函数，初始化的条件是and\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder(String&nbsp;key,String&nbsp;oper,Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpecificationOperator&nbsp;so&nbsp;=&nbsp;new&nbsp;SpecificationOperator();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setJoin(Join.and.name());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setKey(key);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setOper(oper);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setValue(value);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;SpecificationOperator&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers.add(so);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers&nbsp;=&nbsp;new&nbsp;ArrayList&lt;SpecificationOperator&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;完成条件的添加\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;add(String&nbsp;key,String&nbsp;oper,Object&nbsp;value,String&nbsp;join)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpecificationOperator&nbsp;so&nbsp;=&nbsp;new&nbsp;SpecificationOperator();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setKey(key);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setValue(value);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setOper(oper);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;so.setJoin(join);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opers.add(so);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;添加or条件的重载\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;this，方便后续的链式调用\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;addOr(String&nbsp;key,String&nbsp;oper,Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.add(key,oper,value,Join.or.name());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;添加and的条件\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;SimpleSpecificationBuilder&lt;T&gt;&nbsp;add(String&nbsp;key,String&nbsp;oper,Object&nbsp;value)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.add(key,oper,value,Join.and.name());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Specification&lt;T&gt;&nbsp;generateSpecification()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Specification&lt;T&gt;&nbsp;specification&nbsp;=&nbsp;new&nbsp;SimpleSpecification&lt;T&gt;(opers);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;specification;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><p>使用方式：</p><pre class=\"brush:java;toolbar:false\">SimpleSpecificationBuilder&lt;Resource&gt;&nbsp;builder&nbsp;=&nbsp;new&nbsp;SimpleSpecificationBuilder&lt;Resource&gt;();//Resource&nbsp;持久层实体\r\nbuilder.add(&quot;name&quot;,&nbsp;Operator.likeAll.name(),&nbsp;&quot;keyword&quot;);\r\nSpecification&nbsp;specification&nbsp;=&nbsp;builder.generateSpecification()</pre><p><br/></p>','2017-01-26 10:41:46',1,1,0,0,'1、操作符类：package&amp;nbsp;net.sppan.base.service.specification; /** &amp;nbsp;*&amp;nbsp;操作符类，这个类中存储了键值对和操作符号，另外存储了连接下一个条件的类型是and还是or &amp;nb...','springdata,jpa','springdata中Specification查询封装',227),(10,1,'<p>1、<strong>@Entity(name=&quot;EntityName&quot;)</strong></p><p>必须</p><p>name为可选,对应数据库中一的个表。</p><p><br/></p><p>2、<strong>@Table(name=&quot;&quot;,catalog=&quot;&quot;,schema=&quot;&quot;)</strong></p><p>可选,通常和@Entity配合使用,只能标注在实体的class定义处,表示实体对应的数据库表的信息。</p><p>name:可选,表示表的名称.默认地,表名和实体名称一致,只有在不一致的情况下才需要指定表名。</p><p>catalog:可选,表示Catalog名称,默认为Catalog(&quot;&quot;)。</p><p>schema:可选,表示Schema名称,默认为Schema(&quot;&quot;)。</p><p><br/></p><p>3、<strong>@id</strong></p><p>必须</p><p>@id定义了映射到数据库表的主键的属性,一个实体只能有一个属性被映射为主键.置于getXxxx()前。</p><p>&nbsp;</p><p><br/></p><p>4、<strong>@GeneratedValue(strategy=GenerationType,generator=&quot;&quot;)</strong></p><p>可选</p><p>strategy:表示主键生成策略,有AUTO,INDENTITY,SEQUENCE 和 TABLE 4种,分别表示让ORM框架自动选择,根据数据库的Identity字段生成,根据数据库表的Sequence字段生成,以有根据一个额外的表生成主键,默认为AUTO。</p><p>generator:表示主键生成器的名称,这个属性通常和ORM框架相关,例如,Hibernate可以指定uuid等主键生成方式.</p><p><br/></p><p>5、<strong>@Basic(fetch=FetchType,optional=true)</strong></p><p>可选</p><p>@Basic表示一个简单的属性到数据库表的字段的映射,对于没有任何标注的getXxxx()方法,默认即为@Basic。</p><p>fetch: 表示该属性的读取策略,有EAGER和LAZY两种,分别表示主支抓取和延迟加载,默认为EAGER。</p><p>optional:表示该属性是否允许为null,默认为true。</p><p><br/></p><p>6、<strong>@Column</strong></p><p>可选</p><p>@Column描述了数据库表中该字段的详细定义,这对于根据JPA注解生成数据库表结构的工具非常有作用。</p><p>name:表示数据库表中该字段的名称,默认情形属性名称一致。</p><p>nullable:表示该字段是否允许为null,默认为true。</p><p>unique:表示该字段是否是唯一标识,默认为false。</p><p>length:表示该字段的大小,仅对String类型的字段有效。</p><p>insertable:表示在ORM框架执行插入操作时,该字段是否应出现INSETRT语句中,默认为true。</p><p>updateable:表示在ORM框架执行更新操作时,该字段是否应该出现在UPDATE语句中,默认为true.对于一经创建就不可以更改的字段,该属性非常有用,如对于birthday字段。</p><p>columnDefinition:表示该字段在数据库中的实际类型.通常ORM框架可以根据属性类型自动判断数据库中字段的类型,但是对于Date类型仍无法确定数据库中字段类型究竟是DATE,TIME还是TIMESTAMP.此外,String的默认映射类型为VARCHAR,如果要将String类型映射到特定数据库的BLOB或TEXT字段类型,该属性非常有用。</p><p><br/></p><p>7、<strong>@Transient</strong></p><p>可选</p><p>@Transient表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性。</p><p>如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic。</p><p><br/></p><p>8、<strong>@Lob</strong></p><p>可选</p><p>@Lob标示该字段为大文本类型。</p><p><br/></p>','2017-01-26 10:41:46',1,1,0,0,'1、@Entity(name=&quot;EntityName&quot;)必须name为可选,对应数据库中一的个表。2、@Table(name=&quot;&quot;,catalog=&quot;&quot;,schema=&quot;&quot;)可选,通常和@Entity配合使用,只能标注在实体的class定义处,表...','jpa','JPA中基本属性注解',216),(11,1,'<p>										</p><p>本文主要讲解在maven项目中使用Lucene进行全文检索的基本步骤。<br/></p><p>一、首先需要引入依赖，使用的版本为4.7.2。</p><pre class=\"brush:xml;toolbar:false\">&lt;!--核心包--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;lucene-core&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;4.7.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--关键字高亮--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;lucene-highlighter&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;4.7.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--分词--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.janeluo&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;ikanalyzer&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;2012_u6&lt;/version&gt;\r\n&lt;/dependency&gt;</pre><p>二、创建一个Javabean作为数据传输对象</p><pre class=\"brush:java;toolbar:false\">public&nbsp;class&nbsp;SearcherBean&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;id;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;title;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;summary;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;content;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Date&nbsp;createAt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;authorName;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Integer&nbsp;views;\r\n&nbsp;&nbsp;&nbsp;&nbsp;//getter、setter省略\r\n}</pre><p>三、创建索引</p><pre class=\"brush:java;toolbar:false\">public&nbsp;void&nbsp;addBean()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//指定文件存储路径\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Directory&nbsp;directory&nbsp;=&nbsp;NIOFSDirectory.open(new&nbsp;File(&quot;c://&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建词法分析\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Analyzer&nbsp;analyzer&nbsp;=&nbsp;new&nbsp;IKAnalyzer();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建IndexWriter\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriterConfig&nbsp;iwc&nbsp;=&nbsp;new&nbsp;IndexWriterConfig(Version.LUCENE_47,&nbsp;analyzer);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;new&nbsp;IndexWriter(directory,&nbsp;iwc);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//创建文档\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;createDoc(bean);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//保存文档\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.addDocument(doc);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(&quot;add&nbsp;bean&nbsp;to&nbsp;lucene&nbsp;error&quot;,&nbsp;e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(writer&nbsp;!=&nbsp;null)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(&quot;close&nbsp;failed&quot;,&nbsp;e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n/**\r\n*&nbsp;创建Doc\r\n*&nbsp;@param&nbsp;bean\r\n*&nbsp;@return\r\n*/\r\nprivate&nbsp;Document&nbsp;createDoc(SearcherBean&nbsp;bean)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;new&nbsp;Document();\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;StringField(&quot;id&quot;,&nbsp;bean.getId(),&nbsp;Field.Store.YES));\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;TextField(&quot;title&quot;,&nbsp;bean.getTitle(),&nbsp;Field.Store.YES));\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;TextField(&quot;summary&quot;,&nbsp;bean.getSummary(),&nbsp;Field.Store.YES));\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;TextField(&quot;content&quot;,&nbsp;bean.getContent(),&nbsp;Field.Store.YES));	\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;StringField(&quot;authorName&quot;,&nbsp;bean.getAuthorName(),&nbsp;Field.Store.YES));\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;IntField(&quot;views&quot;,&nbsp;bean.getViews(),&nbsp;Field.Store.YES));\r\n&nbsp;&nbsp;&nbsp;&nbsp;doc.add(new&nbsp;StringField(&quot;createdAt&quot;,&nbsp;DateTools.dateToString(bean.getCreateAt(),&nbsp;DateTools.Resolution.MILLISECOND),&nbsp;Field.Store.YES));\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;doc;\r\n}</pre><p>\r\n									</p>','2017-02-16 15:00:29',0,1,0,0,'本文主要讲解在maven项目中使用Lucene进行全文检索的基本步骤。一、首先需要引入依赖，使用的版本为4.7.2。&lt;!--核心包--&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt; &lt;artifactId&gt;lucene-core&lt;/artifactId&gt; &lt;version&gt;4.7.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!--关键字高亮--&gt; &lt;groupId&g...','lucene','在项目中使用Lucene进行全文检索一',161),(12,1,'<p>接上一文章<a href=\"http://60.205.178.218/b/view/11\" target=\"_blank\">在项目中使用Lucene进行全文检索一</a></p><p>4、删除索引<br/></p><pre class=\"brush:java;toolbar:false\">@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;deleteBean(String&nbsp;beanId)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriterConfig&nbsp;iwc&nbsp;=&nbsp;new&nbsp;IndexWriterConfig(Version.LUCENE_47,&nbsp;analyzer);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer&nbsp;=&nbsp;new&nbsp;IndexWriter(directory,&nbsp;iwc);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.deleteDocuments(new&nbsp;Term(&quot;id&quot;,&nbsp;beanId));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(&quot;delete&nbsp;bean&nbsp;to&nbsp;lucene&nbsp;error,beanId:&quot;+beanId,e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(&quot;delete&nbsp;bean&nbsp;to&nbsp;lucene&nbsp;error,beanId:&quot;+beanId,e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;finally&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(writer!=null)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writer.close();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.error(&quot;close&nbsp;failed&quot;,&nbsp;e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;删除所有\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;deleteAllBean()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;	IndexWriter&nbsp;writer&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;	try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;		IndexWriterConfig&nbsp;iwc&nbsp;=&nbsp;new&nbsp;IndexWriterConfig(Version.LUCENE_47,&nbsp;analyzer);\r\n&nbsp;&nbsp;&nbsp;&nbsp;		writer&nbsp;=&nbsp;new&nbsp;IndexWriter(directory,&nbsp;iwc);\r\n&nbsp;&nbsp;&nbsp;&nbsp;		writer.deleteAll();\r\n&nbsp;&nbsp;&nbsp;&nbsp;	}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;		logger.error(&quot;delete&nbsp;allBean&nbsp;to&nbsp;lucene&nbsp;error&quot;,e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;	}&nbsp;catch&nbsp;(InterruptedException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;		logger.error(&quot;delete&nbsp;allBean&nbsp;to&nbsp;lucene&nbsp;error&quot;,e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;	}&nbsp;finally&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;		try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;			if(writer!=null)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;				writer.close();\r\n&nbsp;&nbsp;&nbsp;&nbsp;			}\r\n&nbsp;&nbsp;&nbsp;&nbsp;		}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;			logger.error(&quot;close&nbsp;failed&quot;,&nbsp;e);\r\n&nbsp;&nbsp;&nbsp;&nbsp;		}\r\n&nbsp;&nbsp;&nbsp;&nbsp;	}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p>','2017-02-16 16:34:51',0,1,0,0,'接上一文章在项目中使用Lucene进行全文检索一4、删除索引@Override &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;deleteBean(String&nbsp;beanId)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexWriter&nbsp;writer&nbsp;=&nbsp;null; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nb...','lucene','在项目中使用Lucene进行全文检索二',143),(13,1,'<p>										</p><p>接上一文章<a href=\"http://60.205.178.218/b/view/12\" target=\"_blank\" textvalue=\"在项目中使用Lucene进行全文检索二\">在项目中使用Lucene进行全文检索二</a></p><p>5、检索</p><pre class=\"brush:java;toolbar:false\">/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;转换为SearchBean\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;searcher\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;topDocs\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;IOException\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;SearcherBean&gt;&nbsp;getSearcherBeans(Query&nbsp;query,&nbsp;IndexSearcher&nbsp;searcher,&nbsp;TopDocs&nbsp;topDocs)&nbsp;throws&nbsp;IOException&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SearcherBean&gt;&nbsp;searcherBeans&nbsp;=&nbsp;new&nbsp;ArrayList&lt;SearcherBean&gt;();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(ScoreDoc&nbsp;item&nbsp;:&nbsp;topDocs.scoreDocs)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;searcher.doc(item.doc);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SearcherBean&nbsp;searcherBean&nbsp;=&nbsp;new&nbsp;SearcherBean();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBean.setId(doc.get(&quot;id&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBean.setTitle(setHighlighter(query,&nbsp;doc,&nbsp;&quot;title&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBean.setSummary(setHighlighter(query,&nbsp;doc,&nbsp;&quot;summary&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBean.setContent(setHighlighter(query,&nbsp;doc,&nbsp;&quot;content&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBean.setViews(Integer.parseInt(doc.get(&quot;views&quot;)));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBean.setAuthorName(doc.get(&quot;authorName&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n				searcherBean.setCreateAt(DateTools.stringToDate(doc.get(&quot;createdAt&quot;)));\r\n			}&nbsp;catch&nbsp;(java.text.ParseException&nbsp;e)&nbsp;{\r\n				e.printStackTrace();\r\n			}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcherBeans.add(searcherBean);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;searcherBeans;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;获取Query&nbsp;对象\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;keyword\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;module\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Query&nbsp;getQuery(String&nbsp;keyword)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueryParser&nbsp;queryParser1&nbsp;=&nbsp;new&nbsp;QueryParser(Version.LUCENE_47,&nbsp;&quot;content&quot;,&nbsp;analyzer);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;termQuery1&nbsp;=&nbsp;queryParser1.parse(keyword);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueryParser&nbsp;queryParser2&nbsp;=&nbsp;new&nbsp;QueryParser(Version.LUCENE_47,&nbsp;&quot;title&quot;,&nbsp;analyzer);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;termQuery2&nbsp;=&nbsp;queryParser2.parse(keyword);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QueryParser&nbsp;queryParser3&nbsp;=&nbsp;new&nbsp;QueryParser(Version.LUCENE_47,&nbsp;&quot;summary&quot;,&nbsp;analyzer);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;termQuery3&nbsp;=&nbsp;queryParser3.parse(keyword);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BooleanQuery&nbsp;booleanClauses&nbsp;=&nbsp;new&nbsp;BooleanQuery();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;booleanClauses.add(new&nbsp;BooleanClause(termQuery1,&nbsp;BooleanClause.Occur.SHOULD));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;booleanClauses.add(new&nbsp;BooleanClause(termQuery2,&nbsp;BooleanClause.Occur.SHOULD));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;booleanClauses.add(new&nbsp;BooleanClause(termQuery3,&nbsp;BooleanClause.Occur.SHOULD));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;booleanClauses.setMinimumNumberShouldMatch(1);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;booleanClauses;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(ParseException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;通过关键字搜索分页\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;keyword&nbsp;关键字\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Page&lt;SearcherBean&gt;&nbsp;search(String&nbsp;keyword)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexReader&nbsp;aIndexReader&nbsp;=&nbsp;DirectoryReader.open(directory);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcher&nbsp;=&nbsp;new&nbsp;IndexSearcher(aIndexReader);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;getQuery(keyword);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopDocs&nbsp;topDocs&nbsp;=&nbsp;searcher.search(query,&nbsp;50);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SearcherBean&gt;&nbsp;searcherBeans&nbsp;=&nbsp;getSearcherBeans(query,&nbsp;searcher,&nbsp;topDocs);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Page&lt;SearcherBean&gt;&nbsp;searcherBeanPage&nbsp;=&nbsp;new&nbsp;Page&lt;&gt;(searcherBeans,&nbsp;1,&nbsp;10,&nbsp;100,&nbsp;1000);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;searcherBeanPage;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;分页检索\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;pageNum&nbsp;当前页\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;pageSize&nbsp;每页条数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;queryString&nbsp;关键字\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;Page&lt;SearcherBean&gt;&nbsp;search(int&nbsp;pageNum,&nbsp;int&nbsp;pageSize,&nbsp;String&nbsp;queryString)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexReader&nbsp;aIndexReader&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aIndexReader&nbsp;=&nbsp;DirectoryReader.open(directory);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IndexSearcher&nbsp;searcher&nbsp;=&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searcher&nbsp;=&nbsp;new&nbsp;IndexSearcher(aIndexReader);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Query&nbsp;query&nbsp;=&nbsp;getQuery(queryString);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc&nbsp;lastScoreDoc&nbsp;=&nbsp;getLastScoreDoc(pageNum,&nbsp;pageSize,&nbsp;query,&nbsp;searcher);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopDocs&nbsp;topDocs&nbsp;=&nbsp;searcher.searchAfter(lastScoreDoc,&nbsp;query,&nbsp;pageSize);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SearcherBean&gt;&nbsp;searcherBeans&nbsp;=&nbsp;getSearcherBeans(query,&nbsp;searcher,&nbsp;topDocs);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;totalRow&nbsp;=&nbsp;searchTotalRecord(searcher,&nbsp;query);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;totalPages;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((totalRow&nbsp;%&nbsp;pageSize)&nbsp;==&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalPages&nbsp;=&nbsp;totalRow&nbsp;/&nbsp;pageSize;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalPages&nbsp;=&nbsp;totalRow&nbsp;/&nbsp;pageSize&nbsp;+&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Page&lt;SearcherBean&gt;&nbsp;searcherBeanPage&nbsp;=&nbsp;new&nbsp;Page&lt;&gt;(searcherBeans,&nbsp;pageNum,&nbsp;pageSize,&nbsp;totalPages,&nbsp;totalRow);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;searcherBeanPage;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(IOException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据页码和分页大小获取上一次最后一个ScoreDoc\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;pageIndex\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;pageSize\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;query\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;indexSearcher\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;IOException\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;ScoreDoc&nbsp;getLastScoreDoc(int&nbsp;pageIndex,&nbsp;int&nbsp;pageSize,&nbsp;Query&nbsp;query,&nbsp;IndexSearcher&nbsp;indexSearcher)&nbsp;throws&nbsp;IOException&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(pageIndex&nbsp;==&nbsp;1)&nbsp;return&nbsp;null;//如果是第一页返回空\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;num&nbsp;=&nbsp;pageSize&nbsp;*&nbsp;(pageIndex&nbsp;-&nbsp;1);//获取上一页的数量\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopDocs&nbsp;tds&nbsp;=&nbsp;indexSearcher.search(query,&nbsp;num);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;tds.scoreDocs[num&nbsp;-&nbsp;1];\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;query\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;IOException\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@Title:&nbsp;searchTotalRecord\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@Description:&nbsp;获取符合条件的总记录数\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;searchTotalRecord(IndexSearcher&nbsp;searcher,&nbsp;Query&nbsp;query)&nbsp;throws&nbsp;IOException&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TopDocs&nbsp;topDocs&nbsp;=&nbsp;searcher.search(query,&nbsp;Integer.MAX_VALUE);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(topDocs&nbsp;==&nbsp;null&nbsp;||&nbsp;topDocs.scoreDocs&nbsp;==&nbsp;null&nbsp;||&nbsp;topDocs.scoreDocs.length&nbsp;==&nbsp;0)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScoreDoc[]&nbsp;docs&nbsp;=&nbsp;topDocs.scoreDocs;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;docs.length;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;高亮设置\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;query\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;doc\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;field\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;String&nbsp;setHighlighter(Query&nbsp;query,Document&nbsp;doc,String&nbsp;field){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleHTMLFormatter&nbsp;simpleHtmlFormatter&nbsp;=&nbsp;new&nbsp;SimpleHTMLFormatter(&quot;&lt;font&nbsp;color=\\&quot;red\\&quot;&gt;&quot;,&nbsp;&quot;&lt;/font&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Highlighter&nbsp;highlighter&nbsp;=&nbsp;new&nbsp;Highlighter(simpleHtmlFormatter,new&nbsp;QueryScorer(query));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;fieldValue&nbsp;=&nbsp;doc.get(field);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;highlighterStr&nbsp;=&nbsp;highlighter.getBestFragment(analyzer,field,fieldValue);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;highlighterStr&nbsp;==&nbsp;null&nbsp;?&nbsp;fieldValue:highlighterStr;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;catch&nbsp;(Exception&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	e.printStackTrace();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}</pre><p><br/></p><p>\r\n									</p>','2017-02-16 16:37:24',0,1,0,0,'5、检索/** &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;&nbsp;转换为SearchBean &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;searcher &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;topDocs &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;IOException &nbsp;&nbsp;&...','lucene','在项目中使用Lucene进行全文检索三',141);

/*Table structure for table `tb_category` */

DROP TABLE IF EXISTS `tb_category`;

CREATE TABLE `tb_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `status` int(2) DEFAULT '0',
  `count` int(11) DEFAULT NULL,
  `description` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `tb_category` */

insert  into `tb_category`(`id`,`name`,`status`,`count`,`description`) values (1,'原创',0,0,'原创'),(2,'转载',0,0,'转载'),(3,'其他',0,0,'其他');

/*Table structure for table `tb_login_log` */

DROP TABLE IF EXISTS `tb_login_log`;

CREATE TABLE `tb_login_log` (
  `userId` int(11) NOT NULL,
  `loginAt` datetime NOT NULL,
  `ip` varchar(100) DEFAULT NULL,
  KEY `userId_index` (`userId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `tb_login_log` */

insert  into `tb_login_log`(`userId`,`loginAt`,`ip`) values (1,'2017-02-12 22:18:35','171.221.141.118'),(1,'2017-02-13 11:43:24','182.150.46.239'),(1,'2017-02-13 13:22:54','182.150.46.239'),(1,'2017-02-14 15:12:10','182.150.46.239'),(1,'2017-02-16 13:59:18','182.150.46.239'),(1,'2017-02-16 14:11:56','182.150.46.239'),(1,'2017-02-16 14:41:51','182.150.46.239'),(1,'2017-02-16 14:45:21','182.150.46.239'),(1,'2017-02-16 16:26:15','182.150.46.239'),(1,'2017-02-16 16:43:49','182.150.46.239'),(1,'2017-02-16 16:48:12','182.150.46.239'),(1,'2017-02-19 18:20:03','171.221.0.100');

/*Table structure for table `tb_options` */

DROP TABLE IF EXISTS `tb_options`;

CREATE TABLE `tb_options` (
  `key` varchar(255) NOT NULL DEFAULT '' COMMENT 'key关键字',
  `value` text NOT NULL COMMENT '值',
  `desc` varchar(255) NOT NULL DEFAULT '' COMMENT '说明',
  PRIMARY KEY (`key`),
  UNIQUE KEY `key` (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `tb_options` */

insert  into `tb_options`(`key`,`value`,`desc`) values ('duoshuo_short_name','jfinalblog','多说插件短域名'),('siteAboutMe','<p>\r\n    <span style=\"color: rgb(146, 208, 80);\"><strong>jfinalblog</strong></span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(255, 0, 0);\">我的博客系统！</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 176, 80);\">由SPPan开发，用于记录程序员生涯中遇到的一些问题！</span>\r\n</p>\r\n<p>\r\n    <span style=\"color: rgb(0, 176, 240);\">恩</span>、<span style=\"color: rgb(255, 255, 0);\">没错</span>、<span style=\"color: rgb(112, 48, 160);\">就是这样。。。。</span>\r\n</p>','关于我'),('siteDescription','jfinalblog SPPan博客系统','站点描述'),('siteDomain','http://60.205.178.218','网站域名'),('siteName','jfinalblog','网站名称');

/*Table structure for table `tb_session` */

DROP TABLE IF EXISTS `tb_session`;

CREATE TABLE `tb_session` (
  `id` varchar(33) NOT NULL,
  `userId` int(11) NOT NULL,
  `expireAt` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `tb_session` */

insert  into `tb_session`(`id`,`userId`,`expireAt`) values ('28247eed56a44eefa21a0fea2a49b9b6',1,1581517115640),('641f648b78f14d608ef505c1654d52c5',1,1486970574104),('6759582bc2b742e789f9532bd629bee9',1,1486964604545),('c66c8a02ba5c44c6923e8b252fdad699',1,1487506803010),('c84e1ec61e594aa4ac2ae1f3bc82a600',1,1487231958985),('f1d5e3ab7e9747288f95e58a12637b14',1,1487240775081),('f6e5fa58f738471b89442ce9e0c2c59a',1,1487063530328);

/*Table structure for table `tb_tag` */

DROP TABLE IF EXISTS `tb_tag`;

CREATE TABLE `tb_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  `status` int(2) DEFAULT '0',
  `count` int(11) DEFAULT NULL,
  `description` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

/*Data for the table `tb_tag` */

insert  into `tb_tag`(`id`,`name`,`status`,`count`,`description`) values (4,'nginx',0,0,NULL),(5,'maven',0,0,NULL),(6,'spring',0,0,NULL),(7,'quartz',0,0,NULL),(8,'springboot',0,0,NULL),(9,'linux',0,0,NULL),(10,'javascript',0,0,NULL),(11,'jqgrid',0,0,NULL),(12,'springdata',0,0,NULL),(13,'jpa',0,0,NULL),(14,'lucene',0,0,NULL),(15,'java',0,0,NULL);

/*Table structure for table `tb_user` */

DROP TABLE IF EXISTS `tb_user`;

CREATE TABLE `tb_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickName` varchar(50) NOT NULL,
  `userName` varchar(150) NOT NULL,
  `password` varchar(150) NOT NULL,
  `salt` varchar(150) NOT NULL,
  `status` int(11) NOT NULL,
  `avatar` varchar(100) NOT NULL,
  `createAt` datetime NOT NULL,
  `ip` varchar(100) DEFAULT NULL,
  `description` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `tb_user` */

insert  into `tb_user`(`id`,`nickName`,`userName`,`password`,`salt`,`status`,`avatar`,`createAt`,`ip`,`description`) values (1,'SPPan','whoismy8023@163.com','ee7081b176fef2d993cfdf5162689f341e183b93af1f5de70ff42b3d7e00c166','zmxyyZJkE-N6JjRhujp6U8l4Yu7vuQDZ',1,'0/1.jpg','2017-01-24 09:41:30','127.0.0.1','这是描述吧');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
